{"title":"Shelter usage in Toronto (2017-2021)","markdown":{"yaml":{"title":"Shelter usage in Toronto (2017-2021)","description":"I look at Toronto shelter usage numbers between 2017 and January 2021. I document and adjust for a systematic error in the 2017 data. The data show that homelessness in Toronto is a large problem; essentially all shelters are almost always full. COVID changed the nature of the problem by reducing the number of people using shelters, however they must be sleeping somewhere. I compare January 2021 with January 2020 and estimate that following COVID there are now around an additional 3,500 people sleeping somewhere outside of shelters, possibly outdoors.\n","author":[{"name":"Rohan Alexander","url":{"rohanalexander.com":null}}],"date":"2021-01-24","output":{"distill::distill_article":{"self_contained":false,"toc":true,"toc_depth":3}},"draft":false,"bibliography":"references.bib","collections":{"posts":{"citations":false}}},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  echo = TRUE,\n  R.options = list(width = 60)\n  )\nlibrary(knitr)\n```\n\n\nThe extent of homelessness in Toronto was highlighted for the R community in December 2020 when the dataset was used in TidyTuesday. That dataset contained data for 2017 to 2019, inclusive. In this post I expand the dataset through to January 2021 to see what has happened since COVID. I also document and adjust for a systematic error in the 2017 dataset. I compare the usage of shelters this year with last year. I estimate that on Friday, 22 January 2021, when it was -11C with winds of 17km/h, there were roughly 3,634 additional people sleeping somewhere other than a shelter, compared with this time last year.\n\n## Set up workspace and gather data\n\nI'll use the R statistical programming language [@citeR]. The datasets are accessed via the `opendatatoronto` package [@sharla]. This package wraps around the [City of Toronto's Open Data Portal](https://open.toronto.ca) and allows the direct import of data rather than the need to visit the website. The website is great, but using the package enhances reproducibility. I'll use the `tidyverse` package to make data manipulation easier [@citetidyverse].\n\n```{r}\nlibrary(opendatatoronto)\nlibrary(tidyverse)\n```\n\n\n```{r, eval=F, echo=T}\n# Get the data\n# Based on https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-12-01/readme.md\nall_data <- \n  opendatatoronto::search_packages(\"Daily Shelter Occupancy\") %>% \n  opendatatoronto::list_package_resources() %>% \n  dplyr::filter(name %in% c(\"daily-shelter-occupancy-2017-csv\",\n                     \"daily-shelter-occupancy-2018-csv\", \n                     \"daily-shelter-occupancy-2019-csv\", \n                     \"daily-shelter-occupancy-2020.csv\")) %>% \n  group_split(name) %>% # Don't totally understand how this works\n  map_dfr(get_resource, .id = \"file\")\nwrite_csv(all_data, \"inputs/raw_data.csv\")\n```\n\n\n\nLet's just have a quick look at the data.\n\n```{r}\nall_data <- read_csv(\"inputs/raw_data.csv\", \n                     col_types = c(\"iiccccccccccii\")) \n# The col_types hieroglyphics above stand for integer, integer, character... etc.\nhead(all_data)\n```\n\n\n## Data cleaning and preparation\n\n### Make the data easier to deal with\n\nThe column names aren't overly nice to type, there are a few columns that we're not really going to use much, and finally a few of the columns have data that are less obvious than they should be. For instance, the 'file' tells us the year of the data, but because of the import settings it's 1, 2... instead of 2017, 2018....\n\n```{r}\ntoronto_shelters <-\n  all_data %>% \n  janitor::clean_names() %>% # Make the column names easier to type. Thanks Sharla!\n  mutate(file_year = \n           case_when(\n             file == \"1\" ~ 2017,\n             file == \"2\" ~ 2018,\n             file == \"3\" ~ 2019,\n             file == \"4\" ~ 2020,\n             TRUE ~ -1)\n  ) %>% # Just make the column easier to deal with\n  select(-id, -file)\n```\n\nThe main issue with the data is the dates. In 2017-2019 (inclusive) they *appear* to be year-month-day, but for 2020 it seems like month-day-year. The separator is also inconsistent between '-' and '/'. I'll first clean that up, check our guesses, and then get to the main issue. I'm going to draw on the `lubridate` package [@citelubridate].\n\n```{r}\nlibrary(lubridate)\ntoronto_shelters <- \n  toronto_shelters %>% \n  # 1st line removes times (probs don't actually need to do) and 2nd makes the separation consistent\n  mutate(occupancy_date = str_remove(occupancy_date, \"T[:digit:]{2}:[:digit:]{2}:[:digit:]{2}\"),\n         occupancy_date = str_replace_all(occupancy_date, \"/\", \"-\")\n  ) %>% \n  # Parsing differs between 2017-2019 and 2020. Last line is a catch-all - shouldn't get there.\n  mutate(date = case_when(\n    file_year == \"2020\" ~ mdy(occupancy_date, quiet = TRUE), \n    file_year %in% c(\"2017\", \"2018\", \"2019\") ~ ymd(occupancy_date, quiet = TRUE),\n    TRUE ~ NA_Date_\n    )\n    ) %>% \n  select(file_year, date, occupancy_date, organization_name:capacity)\n```\n\n### Check content of day, month, and year\n\nLet's just check that my guess of the date orderings was at least plausible by looking at the distribution of year, month, and day bits.\n\n```{r}\ntoronto_shelters <- \n  toronto_shelters %>% \n  separate(occupancy_date, into = c('one', 'two', 'three'), sep = \"-\", remove = FALSE)\n```\n\n\n```{r}\ntoronto_shelters %>% \n  filter(file_year %in% c(2017, 2018, 2019)) %>% \n  count(one) %>% \n  rename(Year = one, Number = n) %>% \n  kableExtra::kbl(caption = \"Count of entries by year for 2017-2019\") %>%\n  kableExtra::kable_styling()\n```\n\n\n```{r}\ntoronto_shelters %>% \n  filter(file_year %in% c(2017, 2018, 2019)) %>% \n  count(two) %>% \n  rename(Month = two, Number = n) %>% \n  kableExtra::kbl(caption = \"Count of entries by month for 2017-2019\") %>%\n  kableExtra::kable_styling()\n```\n\n\n```{r firstthreeyearsdistrib, fig.cap = \"Distribution of days for 2017-2019\"}\ntoronto_shelters %>% \n  filter(file_year %in% c(2017, 2018, 2019)) %>% \n  count(three) %>% \n  ggplot(aes(x = three, y = n)) +\n  geom_point() +\n  theme_minimal() +\n  labs(x = \"Day\",\n       y = \"Number\")\n```\n\nAnd again, but for 2020.\n\n```{r}\ntoronto_shelters %>% \n  filter(file_year == 2020) %>% \n  count(one) %>% \n  rename(Month = one, Number = n) %>% \n  kableExtra::kbl(caption = \"Count of entries by month for 2020\") %>%\n  kableExtra::kable_styling()\n```\n\n\n```{r yearsdistribfor2020, fig.cap = \"Distribution of days for 2020\"}\ntoronto_shelters %>% \n  filter(file_year == 2020) %>% \n  count(two) %>% \n  ggplot(aes(x = two, y = n)) +\n  geom_point() +\n  theme_minimal() +\n  labs(x = \"Day\",\n       y = \"Number\")\n```\n\n\n```{r}\ntoronto_shelters %>% \n  filter(file_year == 2020) %>% \n  count(three) %>% \n  rename(Year = three, Number = n) %>% \n  kableExtra::kbl(caption = \"Count of entries by year for 2020\") %>%\n  kableExtra::kable_styling()\n```\n\nThat's all looking fine. We'd know that we have issues if the distribution of the days wasn't roughly uniform, or if we have values other than [1-12] in the month.\n\n### Check columns agree about the year\n\nLet's now also check that the year implied by the date matches the year implied by the file.\n\n```{r}\ntoronto_shelters %>% \n  mutate(check_year = year(date) == file_year) %>% \n  filter(check_year == FALSE)\n\ntoronto_shelters <- \n  toronto_shelters %>% \n  select(-occupancy_date, -one, -two, -three, -file_year)\n```\n\nThat's also fine. And I'll clean-up by removing the unnecessary columns.\n\n### One last thing - plot raw data\n\nEverything seems fine, but it's always important to 'Plot. Your. Raw. Data.', so before moving on, I should plot the raw data to see if there's anything else going on. (Here, students seem to get confused what 'raw' means; I'm using it to refer to as close to the original dataset as possible, so no sums, or averages, etc, if possible. Not necessarily before any cleaning. Sometimes your data are too disperse for that so there will be an element of manipulation. The main point is that you, at the very least, need to plot the data that you're going to be modelling.)\n\nLet's just plot the order. As this dataset has been put together by a human we'd expect that it'd be in order of date. Let's just plot the date in the order it appears in the dataset (Figure \\@ref(fig:plotorder)).\n\n```{r plotorder, fig.cap = \"Comparison of row number with date\"}\ntoronto_shelters %>% \n  mutate(row_number = c(1:nrow(toronto_shelters))) %>% \n  ggplot(aes(x = row_number, y = date), alpha = 0.1) +\n  geom_point() +\n  theme_minimal() +\n  labs(x = \"Row number\",\n       y = \"Date\")\n```\n\nðŸ˜±ðŸ˜±ðŸ˜± This is a bit of a 'hacky' graph but it illustrates the point which is that the data are not in order in the dataset. If they were in order, then we'd expect them to be along the diagonal. \n\nIt's super weird  that they're not in order in the raw data. Above, I checked by splitting them into pieces (day, month, year) and the counts were okay. But the 'hacky' graph was pretty hacky, so let's try to summarise the data a little and then have another look. We'll get a count by date and the sector of the shelter.\n\n```{r}\n# Based on Lisa Lendway: \n# https://github.com/llendway/tidy_tuesday_in_thirty/blob/main/2020_12_01_tidy_tuesday.Rmd\ntoronto_shelters_by_day <- \n  toronto_shelters %>% \n  # We only want rows with both occupancy and capacity  \n  tidyr::drop_na(occupancy, capacity) %>% \n  # We want to know the occupancy by date and sector\n  group_by(date, sector) %>% \n  summarise(occupancy = sum(occupancy),\n            capacity = sum(capacity),\n            usage = occupancy / capacity, .groups = 'drop')\n\nhead(toronto_shelters_by_day)\n```\n\nWe are interested in availability of shelter spots in Toronto on the basis of sector for each day. Different sectors focus on different folks: Co-ed, Families, Men, Women, Youth. Now for each day for each sector we have a proportion (note: horrifyingly >1 is possible). In the notes to the data we're told that the capacity in 2020 may not be accurate, so for this chart we'll just focus on 2017-2019 (inclusive) (Figure \\@ref(fig:plotoccupancyrate)).\n\n```{r plotoccupancyrate, fig.cap = \"Occupancy rate per day in Toronto shelters\"}\n# Graph 2017-2019 (inc)\ntoronto_shelters_by_day %>% \n  filter(year(date) != \"2020\") %>% \n  ggplot(aes(x = date, y = usage, color = sector)) + \n  geom_point(aes(group = sector), alpha = 0.3) +\n  scale_y_continuous(limits = c(0, NA)) +\n  labs(color = \"Type\",\n       x = \"Date\",\n       y = \"Occupancy rate\") +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Set1\")\n```\n\nThat one looks kind of okay, but we'll again see the problem immediately when we plot the raw number occupied (we can bring this through to include 2020 as it's not to do with capacity) (Figure \\@ref(fig:plotoccupancy)).\n\n```{r plotoccupancy, fig.cap = \"Occupancy per day in Toronto shelters\"}\ntoronto_shelters_by_day %>% \n  ggplot(aes(x = date, y = occupancy, color = sector)) + \n  geom_point(aes(group = sector), alpha = 0.3) +\n  scale_y_continuous(limits = c(0, NA)) +\n  labs(color = \"Type\",\n       x = \"Date\",\n       y = \"Occupancy (number)\") +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Set1\")\n```\n \nWe can see that using modified data hides the problem. Let's focus on 2017, as that's where the biggest issue is and facet by month (Figure \\@ref(fig:sheltersin2017)).\n\n```{r sheltersin2017, fig.cap = \"Occupancy in Toronto shelters in 2017\"}\ntoronto_shelters_by_day %>% \n  filter(year(date) == 2017) %>% \n  ggplot(aes(x = day(date), y = occupancy, color = sector)) + \n  geom_point(aes(group = sector), alpha = 0.3) +\n  scale_y_continuous(limits = c(0, NA)) +\n  labs(color = \"Type\",\n       x = \"Day\",\n       y = \"Occupancy (number)\",\n       title = \"Toronto shelters in 2017\",\n       subtitle = \"Occupancy per day\") +\n  facet_wrap(vars(month(date, label = TRUE)),\n             scales = \"free_x\") +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Set1\")\n```\n\nJust to check, let's plot the same for 2018 (Figure \\@ref(fig:sheltersin2018)).\n\n```{r sheltersin2018, fig.cap = \"Daily occupancy in Toronto shelters in 2018\"}\ntoronto_shelters_by_day %>% \n  filter(year(date) == 2018) %>% \n  ggplot(aes(x = day(date), y = occupancy, color = sector)) + \n  geom_point(aes(group = sector), alpha = 0.3) +\n  scale_y_continuous(limits = c(0, NA)) +\n  labs(color = \"Type\",\n       x = \"Day\",\n       y = \"Occupancy (number)\") +\n  facet_wrap(vars(month(date, label = TRUE)),\n             scales = \"free_x\") +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Dark2\")\n```\n\nThis gives us an idea of what we ought to expect in 2017 - why should they be significantly different? To start, focus on January 2017 and see if that makes it clearer what is going on (Figure \\@ref(fig:sheltersinjan2017)).\n\n```{r sheltersinjan2017, fig.cap = \"Daily occupancy in Toronto shelters in January 2017\"}\ntoronto_shelters_by_day %>% \n  filter(year(date) == 2017) %>%\n  filter(month(date) == 1) %>% \n  ggplot(aes(x = day(date), y = occupancy, color = sector)) + \n  geom_point(aes(group = sector)) +\n  scale_y_continuous(limits = c(0, NA)) +\n  labs(color = \"Type\",\n       x = \"Day\",\n       y = \"Occupancy (number)\") +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Set1\")\n```\n\nThis perhaps gives us some idea of what is going on. Let's just check February and see if it looks similar (Figure \\@ref(fig:sheltersinfeb2017)).\n\n```{r sheltersinfeb2017, fig.cap = \"Daily occupancy in Toronto shelters in February 2017\"}\ntoronto_shelters_by_day %>% \n  filter(year(date) == 2017) %>%\n  filter(month(date) == 2) %>% \n  ggplot(aes(x = day(date), y = occupancy, color = sector)) + \n  geom_point(aes(group = sector)) +\n  scale_y_continuous(limits = c(0, NA)) +\n  labs(color = \"Type\",\n       x = \"Day\",\n       y = \"Occupancy (number)\") +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Set1\")\n```\n\nWe've clearly got a problem with the first twelve days of the month. We noted at the start that when you look at the data it's a bit odd in that it's not in order. Let's take another look at that by going back to the data as it was given to us (as opposed to the data by day that we've been using) (Figure \\@ref(fig:sheltersin2017byrow)).\n\n```{r sheltersin2017byrow, fig.cap = \"Date of each row in order in 2017\"}\ntoronto_shelters %>% \n  mutate(counter = 1:nrow(toronto_shelters)) %>% \n  filter(year(date) == 2017) %>% \n  ggplot(aes(x = counter, y = date)) +\n  geom_point(alpha = 0.3) +\n  labs(x = \"Row in the dataset\",\n       y = \"Date of that row\") +\n  theme_minimal()\n```\n\nAlthough there's no rule that says the dataset has to be in order of the date, if it were, then all the points would lie on the diagonal line. We have a lot of deviation from that. To get a sense of what we're expecting let's look at all four years (Figure \\@ref(fig:sheltersdatebyrow)).\n\n```{r sheltersdatebyrow, fig.cap = \"Date of each row in order (2017-2020)\"}\ntoronto_shelters %>% \n  mutate(counter = 1:nrow(toronto_shelters)) %>% \n  ggplot(aes(x = counter, y = date)) +\n  geom_point(alpha = 0.3) +\n  facet_wrap(vars(year(date)),\n             scales = \"free\") +\n  labs(x = \"Row in the dataset\",\n       y = \"Date of that row\") +\n  theme_minimal()\n```\n\nIt looks like 2020 is as we'd expect. 2019 has a few odd situations, but not too many. 2018 has a small cluster early in the dataset and then possibly something systematic toward the middle. But it's clear that 2017 has a large number of systematic issues.\n\nIn general, I think that in 2017 the first 12 days are the wrong way around, i.e we think it's year-month-day, but it's actually year-day-month, but there are exceptions. As a first pass, let's just try to flip those first 12 days of each month and see if that helps. It'll be fairly blunt, but hopefully gets us somewhere.\n\n```{r}\ntoronto_shelters <- \n  toronto_shelters %>% \n  mutate(\n    year = year(date),\n    month = month(date),\n    day = day(date),\n    date = as.character(date),\n    changed_date = if_else(\n      date %in% c(\"2017-02-01\", \"2017-03-01\", \"2017-04-01\", \"2017-05-01\", \"2017-06-01\", \n                  \"2017-07-01\", \"2017-08-01\", \"2017-09-01\", \"2017-10-01\", \"2017-11-01\", \n                  \"2017-12-01\", \"2017-01-02\", \"2017-03-02\", \"2017-04-02\", \"2017-05-02\", \n                  \"2017-06-02\", \"2017-07-02\", \"2017-08-02\", \"2017-09-02\", \"2017-10-02\", \n                  \"2017-11-02\", \"2017-12-02\", \"2017-01-03\", \"2017-02-03\", \"2017-04-03\", \n                  \"2017-05-03\", \"2017-06-03\", \"2017-07-03\", \"2017-08-03\", \"2017-09-03\", \n                  \"2017-10-03\", \"2017-11-03\", \"2017-12-03\", \"2017-01-04\", \"2017-02-04\", \n                  \"2017-03-04\", \"2017-05-04\", \"2017-06-04\", \"2017-07-04\", \"2017-08-04\", \n                  \"2017-09-04\", \"2017-10-04\", \"2017-11-04\", \"2017-12-04\", \"2017-01-05\", \n                  \"2017-02-05\", \"2017-03-05\", \"2017-04-05\", \"2017-06-05\", \"2017-07-05\", \n                  \"2017-08-05\", \"2017-09-05\", \"2017-10-05\", \"2017-11-05\", \"2017-12-05\", \n                  \"2017-01-06\", \"2017-02-06\", \"2017-03-06\", \"2017-04-06\", \"2017-05-06\", \n                  \"2017-07-06\", \"2017-08-06\", \"2017-09-06\", \"2017-10-06\", \"2017-11-06\", \n                  \"2017-12-06\", \"2017-01-07\", \"2017-02-07\", \"2017-03-07\", \"2017-04-07\", \n                  \"2017-05-07\", \"2017-06-07\", \"2017-08-07\", \"2017-09-07\", \"2017-10-07\", \n                  \"2017-11-07\", \"2017-12-07\", \"2017-01-08\", \"2017-02-08\", \"2017-03-08\", \n                  \"2017-04-08\", \"2017-05-08\", \"2017-06-08\", \"2017-07-08\", \"2017-09-08\", \n                  \"2017-10-08\", \"2017-11-08\", \"2017-12-08\", \"2017-01-09\", \"2017-02-09\", \n                  \"2017-03-09\", \"2017-04-09\", \"2017-05-09\", \"2017-06-09\", \"2017-07-09\", \n                  \"2017-08-09\", \"2017-10-09\", \"2017-11-09\", \"2017-12-09\", \"2017-01-10\", \n                  \"2017-02-10\", \"2017-03-10\", \"2017-04-10\", \"2017-05-10\", \"2017-06-10\", \n                  \"2017-07-10\", \"2017-08-10\", \"2017-09-10\", \"2017-11-10\", \"2017-12-10\", \n                  \"2017-01-11\", \"2017-02-11\", \"2017-03-11\", \"2017-04-11\", \"2017-05-11\", \n                  \"2017-06-11\", \"2017-07-11\", \"2017-08-11\", \"2017-09-11\", \"2017-10-11\", \n                  \"2017-12-11\", \"2017-01-12\", \"2017-02-12\", \"2017-03-12\", \"2017-04-12\", \n                  \"2017-05-12\", \"2017-06-12\", \"2017-07-12\", \"2017-08-12\", \"2017-09-12\", \n                  \"2017-10-12\", \"2017-11-12\"),\n      paste(year, day, month, sep = \"-\"),\n      paste(year, month, day, sep = \"-\"),\n    ),\n    changed_date = ymd(changed_date)\n    ) %>% \n  select(-year, -month, -day)\n```\n\nNow let's take a look (Figure \\@ref(fig:sheltersdatebyrowadj)).\n\n```{r sheltersdatebyrowadj, fig.cap = \"Date of each row in order in 2017 after adjustment\"}\ntoronto_shelters %>% \n  mutate(counter = 1:nrow(toronto_shelters)) %>% \n  filter(year(date) == 2017) %>% \n  ggplot(aes(x = counter, y = changed_date)) +\n  geom_point(alpha = 0.3) +\n  labs(x = \"Row in the dataset\",\n       y = \"Date of that row\") +\n  theme_minimal()\n```\n\nWe can see that's almost entirely taken care of the systematic differences. However it's probably a little blunt. For instance, notice there are now no entries below the diagonal (Figure \\@ref(fig:sheltersdatebyrowadj2017)).\n\n```{r sheltersdatebyrowadj2017, fig.cap = \"Toronto shelters daily occupancy in 2017 after adjustment\"}\ntoronto_shelters_adjusted <- \n  toronto_shelters %>% \n  # We only want rows with occupancy\n  tidyr::drop_na(occupancy, capacity) %>% \n  # We want to know the occupancy by date and sector\n  group_by(changed_date, sector) %>% \n  summarise(occupancy = sum(occupancy), .groups = 'drop') \n\ntoronto_shelters_adjusted %>% \n  filter(year(changed_date) == 2017) %>% \n  ggplot(aes(x = day(changed_date), y = occupancy, color = sector)) + \n  geom_point(aes(group = sector), alpha = 0.3) +\n  scale_y_continuous(limits = c(0, NA)) +\n  labs(color = \"Type\",\n       x = \"Changed day\",\n       y = \"Occupancy (number)\") +\n  facet_wrap(vars(month(changed_date, label = TRUE)),\n             scales = \"free_x\") +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Set1\")\n```\n\nWe could keep going here to try to get to the bottom of it, but the baby is going to wake up soon and I've got a history of wasting too much time on these types of things. One of the great things about the City of Toronto Data Portal is that each dataset has a publisher and a contact email. I'll email them and will update this when they get back to me.\n  \n  \n  \n  \n\n## Model\n\n\n\n> ...With a laptop, some free software, and a cup of coffee, I can examine what ought to seem like a staggering amount of information. ...I sit here at home, surveying the scope of what's being inflicted on people across the country and around the world as this disease spreads. ...\n>... People sometimes think (or complain) that working with quantitative data like this inures you to the reality of the human lives that lie behind the numbers. Numbers and measures are crude; they pick up the wrong things; they strip out the meaning of what's happening to real people; they make it easy to ignore what can't be counted. \n>There's something to those complaints. But it's mostly a lazy critique. In practice, I find that far from distancing you from questions of meaning, quantitative data forces you to confront them. The numbers draw you in. Working with data like this is an unending exercise in humility, a constant compulsion to think through what you can and cannot see, and a standing invitation to understand what the measures really captureâ€”what they mean, and for whom. ...\"\n>\n> Kieran Healy, 2020, The Kitchen Counter Observatory, 21 May.\n> https://kieranhealy.org/blog/archives/2020/05/21/the-kitchen-counter-observatory/\n\n\nLet's start by looking at the effect of COVID on occupancy. On 17 March Ontario declared a state of emergency, so let's focus on the time around then (Figure \\@ref(fig:focuson2020) includes a dashed line at that point).\n\n```{r focuson2020, fig.cap = \"Shelter usage in 2020\"}\ntoronto_shelters_adjusted %>% \n  filter(year(changed_date) == 2020) %>%\n  ggplot(aes(x = changed_date, y = occupancy, color = sector)) + \n  geom_point(aes(group = sector), alpha = 0.3) +\n  geom_vline(xintercept = ymd(\"2020-03-17\"), linetype = 'dotted')+\n  scale_y_continuous(limits = c(0, NA)) +\n  labs(color = \"Type\",\n       x = \"Changed date\",\n       y = \"Occupancy (number)\") +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Set1\")\n```\n\n\nIt's clear that soon after the state of emergency was declared the usage of shelters began to decrease. Understandably the homeless, like all of us, want to socially distance to the extent possible and this likely means avoiding shelters. If you live in Toronto one thing that you'll notice is that there are a lot of homeless people living in parks since COVID started. While this was fine in summer, the issue is that in winter it is well below 0C overnight.\n\nWe might like to see if we can estimate how many additional people are sleeping outside in January. We'll do this by comparing the number that slept in the shelters in January 2021, compared with the number in the shelters in January 2020, which is before COVID hit Toronto. As Kieran Healy says, an exercise like this is confronting. \n\nWhile it's a stretch to say that if they're not sleeping in a shelter then they must be sleeping outside, it's also not clear where else they could be if they're not in a shelter. It's possible that they have found permanent housing and so are no longer using shelters, however I don't know of any substantial change in public policy or resource allocation such that the whole difference is due to people finding permanent homes.\n\nWe'll use the data that the city has so far released for 2021. The data provider warns us against using capacity, so we'll focus on occupancy. \n\n```{r, eval=F, echo=T}\ncurrent_data <- opendatatoronto::get_resource(\"29852011-c9c2-4b6d-a79a-b718f5ed1ae2\")\n\nwrite_csv(current_data, \"inputs/raw_data-January.csv\")\n```\n\n\n```{r}\ncurrent_data <- read_csv(\"inputs/raw_data-January.csv\", \n                         col_types = c(\"icccicccicccc\")) \n\nhead(current_data)\n```\n\nJust want to do the same basic clean up of the dates as before.\n\n```{r}\ncurrent_data <- \n  current_data %>% \n  janitor::clean_names() %>% # Make the column names easier to type. Thanks Sharla!\n  mutate(occupancy_date = str_remove(occupancy_date, \"T[:digit:]{2}:[:digit:]{2}:[:digit:]{2}\"),\n  ) %>% \n  mutate(date = ymd(occupancy_date, quiet = TRUE))\nhead(current_data)\n```\n\nFor each day we want to know the number in each category. We're then going to compare this to this time last year. \n\n```{r}\ntoronto_shelters_by_day_current <- \n  current_data %>% \n  # We only want rows with occupancy\n  tidyr::drop_na(occupancy) %>% \n  # We want to know the occupancy by date and sector\n  group_by(date, sector) %>% \n  summarise(occupancy = sum(occupancy), .groups = 'drop') %>% \n  mutate(month_day = paste(month(date), day(date), sep = \"-\")) %>% \n  rename(occupancy_2021 = occupancy)\n\nhead(toronto_shelters_by_day_current)\n```\n\n\n```{r}\ntoronto_shelters_by_day_2020 <- \n  toronto_shelters %>% \n  # We only want rows with occupancy\n  tidyr::drop_na(occupancy, capacity) %>% \n  # We want to know the occupancy by date and sector\n  group_by(changed_date, sector) %>% \n  summarise(occupancy = sum(occupancy), .groups = 'drop') %>% \n  filter(year(changed_date) == 2020) %>% \n  mutate(month_day = paste(month(changed_date), day(changed_date), sep = \"-\")) %>% \n  # Don't have to rename but it makes the join easier\n  rename(date = changed_date, \n         occupancy_2020 = occupancy)\n\nhead(toronto_shelters_by_day_2020)\n```\n\nNow we're going to combine the datasets so that for each day, say '4 January', we know that in 2020 shelter usage was X and on that day in 2021 we know that shelter usage was Y (Table \\@ref(tab:jandaily)).\n\n```{r jandaily}\ntoronto_shelters_by_day_current <- \n  toronto_shelters_by_day_current %>% \n  left_join(toronto_shelters_by_day_2020, by = c(\"month_day\" = \"month_day\", \"sector\" = \"sector\")) %>% \n  rename(date = date.x) %>% \n  select(date, sector, occupancy_2020, occupancy_2021) %>% \n  mutate(difference = occupancy_2021 - occupancy_2020)\n\n\ntoronto_shelters_by_day_current %>% \n  rename(Date = date,\n         Sector = sector,\n         `Occupancy in 2020` = occupancy_2020,\n         `Occupancy in 2021` = occupancy_2021,\t\n         Difference = difference) %>% \n  kableExtra::kbl(caption = \"Comparison of shelter usage in January 2021 with January 2020 by day\") %>%\n  kableExtra::kable_styling()\n```\n\nLet's get some average statistics for January by sector (Table \\@ref(tab:janaverage)).\n\n```{r janaverage}\njanuary_average <- \n  toronto_shelters_by_day_current %>% \n  group_by(sector) %>% \n  summarise(Difference = mean(difference)) %>% \n  mutate(Difference = as.integer(Difference))\n\njanuary_average %>% \n  rename(Sector = sector,\n         `Difference this January compared with last` = Difference) %>% \n  kableExtra::kbl(caption = \"Overall comparison of shelter usage in January 2021 with January 2020\") %>%\n  kableExtra::kable_styling()\n```\n\nLet's look at a comparison graph (Figure \\@ref(fig:finalgraph)).\n\n```{r finalgraph, fig.cap = \"Comparison of shelter usage in January 2021 with January 2020\"}\ntoronto_shelters_by_day_current %>% \n  select(-difference) %>% \n  pivot_longer(cols = c(\"occupancy_2020\", \"occupancy_2021\"),\n               names_to = \"year\",\n               values_to = \"number\"\n               ) %>% \n  mutate(year = if_else(year == 'occupancy_2020', '2020', '2021')) %>% \n  ggplot(aes(x = date, y = number, color = year)) +\n  geom_point() +\n  facet_wrap(vars(sector)) +\n  theme_minimal() +\n  labs(x = \"Date\",\n       y = \"Occupancy in shelters (#)\",\n       color = \"Year\")  +\n  scale_color_brewer(palette = \"Set1\")\n```\n\n\nI estimate that in January, on average, there are roughly 3,517 additional people sleeping outside in below freezing conditions this year compared with last year. That is to say, shelter usage is that much below what it was, and I'm not sure where else they could go. In particular, on Friday night, when it was horrendously cold, I estimate there were 3,634 additional people likely sleeping outside, by comparing the usage of shelters on 22 January 2020 with 22 January 2021.\n\nEven if I'm off by an order of magnitude, the city and province clearly should do more.\n\n\n## Acknowledgments {.appendix}\n\nThank you to Monica Alexander for helpful comments.\n\n","srcMarkdownNoYaml":"\n\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  echo = TRUE,\n  R.options = list(width = 60)\n  )\nlibrary(knitr)\n```\n\n## Introduction\n\nThe extent of homelessness in Toronto was highlighted for the R community in December 2020 when the dataset was used in TidyTuesday. That dataset contained data for 2017 to 2019, inclusive. In this post I expand the dataset through to January 2021 to see what has happened since COVID. I also document and adjust for a systematic error in the 2017 dataset. I compare the usage of shelters this year with last year. I estimate that on Friday, 22 January 2021, when it was -11C with winds of 17km/h, there were roughly 3,634 additional people sleeping somewhere other than a shelter, compared with this time last year.\n\n## Set up workspace and gather data\n\nI'll use the R statistical programming language [@citeR]. The datasets are accessed via the `opendatatoronto` package [@sharla]. This package wraps around the [City of Toronto's Open Data Portal](https://open.toronto.ca) and allows the direct import of data rather than the need to visit the website. The website is great, but using the package enhances reproducibility. I'll use the `tidyverse` package to make data manipulation easier [@citetidyverse].\n\n```{r}\nlibrary(opendatatoronto)\nlibrary(tidyverse)\n```\n\n\n```{r, eval=F, echo=T}\n# Get the data\n# Based on https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-12-01/readme.md\nall_data <- \n  opendatatoronto::search_packages(\"Daily Shelter Occupancy\") %>% \n  opendatatoronto::list_package_resources() %>% \n  dplyr::filter(name %in% c(\"daily-shelter-occupancy-2017-csv\",\n                     \"daily-shelter-occupancy-2018-csv\", \n                     \"daily-shelter-occupancy-2019-csv\", \n                     \"daily-shelter-occupancy-2020.csv\")) %>% \n  group_split(name) %>% # Don't totally understand how this works\n  map_dfr(get_resource, .id = \"file\")\nwrite_csv(all_data, \"inputs/raw_data.csv\")\n```\n\n\n\nLet's just have a quick look at the data.\n\n```{r}\nall_data <- read_csv(\"inputs/raw_data.csv\", \n                     col_types = c(\"iiccccccccccii\")) \n# The col_types hieroglyphics above stand for integer, integer, character... etc.\nhead(all_data)\n```\n\n\n## Data cleaning and preparation\n\n### Make the data easier to deal with\n\nThe column names aren't overly nice to type, there are a few columns that we're not really going to use much, and finally a few of the columns have data that are less obvious than they should be. For instance, the 'file' tells us the year of the data, but because of the import settings it's 1, 2... instead of 2017, 2018....\n\n```{r}\ntoronto_shelters <-\n  all_data %>% \n  janitor::clean_names() %>% # Make the column names easier to type. Thanks Sharla!\n  mutate(file_year = \n           case_when(\n             file == \"1\" ~ 2017,\n             file == \"2\" ~ 2018,\n             file == \"3\" ~ 2019,\n             file == \"4\" ~ 2020,\n             TRUE ~ -1)\n  ) %>% # Just make the column easier to deal with\n  select(-id, -file)\n```\n\nThe main issue with the data is the dates. In 2017-2019 (inclusive) they *appear* to be year-month-day, but for 2020 it seems like month-day-year. The separator is also inconsistent between '-' and '/'. I'll first clean that up, check our guesses, and then get to the main issue. I'm going to draw on the `lubridate` package [@citelubridate].\n\n```{r}\nlibrary(lubridate)\ntoronto_shelters <- \n  toronto_shelters %>% \n  # 1st line removes times (probs don't actually need to do) and 2nd makes the separation consistent\n  mutate(occupancy_date = str_remove(occupancy_date, \"T[:digit:]{2}:[:digit:]{2}:[:digit:]{2}\"),\n         occupancy_date = str_replace_all(occupancy_date, \"/\", \"-\")\n  ) %>% \n  # Parsing differs between 2017-2019 and 2020. Last line is a catch-all - shouldn't get there.\n  mutate(date = case_when(\n    file_year == \"2020\" ~ mdy(occupancy_date, quiet = TRUE), \n    file_year %in% c(\"2017\", \"2018\", \"2019\") ~ ymd(occupancy_date, quiet = TRUE),\n    TRUE ~ NA_Date_\n    )\n    ) %>% \n  select(file_year, date, occupancy_date, organization_name:capacity)\n```\n\n### Check content of day, month, and year\n\nLet's just check that my guess of the date orderings was at least plausible by looking at the distribution of year, month, and day bits.\n\n```{r}\ntoronto_shelters <- \n  toronto_shelters %>% \n  separate(occupancy_date, into = c('one', 'two', 'three'), sep = \"-\", remove = FALSE)\n```\n\n\n```{r}\ntoronto_shelters %>% \n  filter(file_year %in% c(2017, 2018, 2019)) %>% \n  count(one) %>% \n  rename(Year = one, Number = n) %>% \n  kableExtra::kbl(caption = \"Count of entries by year for 2017-2019\") %>%\n  kableExtra::kable_styling()\n```\n\n\n```{r}\ntoronto_shelters %>% \n  filter(file_year %in% c(2017, 2018, 2019)) %>% \n  count(two) %>% \n  rename(Month = two, Number = n) %>% \n  kableExtra::kbl(caption = \"Count of entries by month for 2017-2019\") %>%\n  kableExtra::kable_styling()\n```\n\n\n```{r firstthreeyearsdistrib, fig.cap = \"Distribution of days for 2017-2019\"}\ntoronto_shelters %>% \n  filter(file_year %in% c(2017, 2018, 2019)) %>% \n  count(three) %>% \n  ggplot(aes(x = three, y = n)) +\n  geom_point() +\n  theme_minimal() +\n  labs(x = \"Day\",\n       y = \"Number\")\n```\n\nAnd again, but for 2020.\n\n```{r}\ntoronto_shelters %>% \n  filter(file_year == 2020) %>% \n  count(one) %>% \n  rename(Month = one, Number = n) %>% \n  kableExtra::kbl(caption = \"Count of entries by month for 2020\") %>%\n  kableExtra::kable_styling()\n```\n\n\n```{r yearsdistribfor2020, fig.cap = \"Distribution of days for 2020\"}\ntoronto_shelters %>% \n  filter(file_year == 2020) %>% \n  count(two) %>% \n  ggplot(aes(x = two, y = n)) +\n  geom_point() +\n  theme_minimal() +\n  labs(x = \"Day\",\n       y = \"Number\")\n```\n\n\n```{r}\ntoronto_shelters %>% \n  filter(file_year == 2020) %>% \n  count(three) %>% \n  rename(Year = three, Number = n) %>% \n  kableExtra::kbl(caption = \"Count of entries by year for 2020\") %>%\n  kableExtra::kable_styling()\n```\n\nThat's all looking fine. We'd know that we have issues if the distribution of the days wasn't roughly uniform, or if we have values other than [1-12] in the month.\n\n### Check columns agree about the year\n\nLet's now also check that the year implied by the date matches the year implied by the file.\n\n```{r}\ntoronto_shelters %>% \n  mutate(check_year = year(date) == file_year) %>% \n  filter(check_year == FALSE)\n\ntoronto_shelters <- \n  toronto_shelters %>% \n  select(-occupancy_date, -one, -two, -three, -file_year)\n```\n\nThat's also fine. And I'll clean-up by removing the unnecessary columns.\n\n### One last thing - plot raw data\n\nEverything seems fine, but it's always important to 'Plot. Your. Raw. Data.', so before moving on, I should plot the raw data to see if there's anything else going on. (Here, students seem to get confused what 'raw' means; I'm using it to refer to as close to the original dataset as possible, so no sums, or averages, etc, if possible. Not necessarily before any cleaning. Sometimes your data are too disperse for that so there will be an element of manipulation. The main point is that you, at the very least, need to plot the data that you're going to be modelling.)\n\nLet's just plot the order. As this dataset has been put together by a human we'd expect that it'd be in order of date. Let's just plot the date in the order it appears in the dataset (Figure \\@ref(fig:plotorder)).\n\n```{r plotorder, fig.cap = \"Comparison of row number with date\"}\ntoronto_shelters %>% \n  mutate(row_number = c(1:nrow(toronto_shelters))) %>% \n  ggplot(aes(x = row_number, y = date), alpha = 0.1) +\n  geom_point() +\n  theme_minimal() +\n  labs(x = \"Row number\",\n       y = \"Date\")\n```\n\nðŸ˜±ðŸ˜±ðŸ˜± This is a bit of a 'hacky' graph but it illustrates the point which is that the data are not in order in the dataset. If they were in order, then we'd expect them to be along the diagonal. \n\nIt's super weird  that they're not in order in the raw data. Above, I checked by splitting them into pieces (day, month, year) and the counts were okay. But the 'hacky' graph was pretty hacky, so let's try to summarise the data a little and then have another look. We'll get a count by date and the sector of the shelter.\n\n```{r}\n# Based on Lisa Lendway: \n# https://github.com/llendway/tidy_tuesday_in_thirty/blob/main/2020_12_01_tidy_tuesday.Rmd\ntoronto_shelters_by_day <- \n  toronto_shelters %>% \n  # We only want rows with both occupancy and capacity  \n  tidyr::drop_na(occupancy, capacity) %>% \n  # We want to know the occupancy by date and sector\n  group_by(date, sector) %>% \n  summarise(occupancy = sum(occupancy),\n            capacity = sum(capacity),\n            usage = occupancy / capacity, .groups = 'drop')\n\nhead(toronto_shelters_by_day)\n```\n\nWe are interested in availability of shelter spots in Toronto on the basis of sector for each day. Different sectors focus on different folks: Co-ed, Families, Men, Women, Youth. Now for each day for each sector we have a proportion (note: horrifyingly >1 is possible). In the notes to the data we're told that the capacity in 2020 may not be accurate, so for this chart we'll just focus on 2017-2019 (inclusive) (Figure \\@ref(fig:plotoccupancyrate)).\n\n```{r plotoccupancyrate, fig.cap = \"Occupancy rate per day in Toronto shelters\"}\n# Graph 2017-2019 (inc)\ntoronto_shelters_by_day %>% \n  filter(year(date) != \"2020\") %>% \n  ggplot(aes(x = date, y = usage, color = sector)) + \n  geom_point(aes(group = sector), alpha = 0.3) +\n  scale_y_continuous(limits = c(0, NA)) +\n  labs(color = \"Type\",\n       x = \"Date\",\n       y = \"Occupancy rate\") +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Set1\")\n```\n\nThat one looks kind of okay, but we'll again see the problem immediately when we plot the raw number occupied (we can bring this through to include 2020 as it's not to do with capacity) (Figure \\@ref(fig:plotoccupancy)).\n\n```{r plotoccupancy, fig.cap = \"Occupancy per day in Toronto shelters\"}\ntoronto_shelters_by_day %>% \n  ggplot(aes(x = date, y = occupancy, color = sector)) + \n  geom_point(aes(group = sector), alpha = 0.3) +\n  scale_y_continuous(limits = c(0, NA)) +\n  labs(color = \"Type\",\n       x = \"Date\",\n       y = \"Occupancy (number)\") +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Set1\")\n```\n \nWe can see that using modified data hides the problem. Let's focus on 2017, as that's where the biggest issue is and facet by month (Figure \\@ref(fig:sheltersin2017)).\n\n```{r sheltersin2017, fig.cap = \"Occupancy in Toronto shelters in 2017\"}\ntoronto_shelters_by_day %>% \n  filter(year(date) == 2017) %>% \n  ggplot(aes(x = day(date), y = occupancy, color = sector)) + \n  geom_point(aes(group = sector), alpha = 0.3) +\n  scale_y_continuous(limits = c(0, NA)) +\n  labs(color = \"Type\",\n       x = \"Day\",\n       y = \"Occupancy (number)\",\n       title = \"Toronto shelters in 2017\",\n       subtitle = \"Occupancy per day\") +\n  facet_wrap(vars(month(date, label = TRUE)),\n             scales = \"free_x\") +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Set1\")\n```\n\nJust to check, let's plot the same for 2018 (Figure \\@ref(fig:sheltersin2018)).\n\n```{r sheltersin2018, fig.cap = \"Daily occupancy in Toronto shelters in 2018\"}\ntoronto_shelters_by_day %>% \n  filter(year(date) == 2018) %>% \n  ggplot(aes(x = day(date), y = occupancy, color = sector)) + \n  geom_point(aes(group = sector), alpha = 0.3) +\n  scale_y_continuous(limits = c(0, NA)) +\n  labs(color = \"Type\",\n       x = \"Day\",\n       y = \"Occupancy (number)\") +\n  facet_wrap(vars(month(date, label = TRUE)),\n             scales = \"free_x\") +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Dark2\")\n```\n\nThis gives us an idea of what we ought to expect in 2017 - why should they be significantly different? To start, focus on January 2017 and see if that makes it clearer what is going on (Figure \\@ref(fig:sheltersinjan2017)).\n\n```{r sheltersinjan2017, fig.cap = \"Daily occupancy in Toronto shelters in January 2017\"}\ntoronto_shelters_by_day %>% \n  filter(year(date) == 2017) %>%\n  filter(month(date) == 1) %>% \n  ggplot(aes(x = day(date), y = occupancy, color = sector)) + \n  geom_point(aes(group = sector)) +\n  scale_y_continuous(limits = c(0, NA)) +\n  labs(color = \"Type\",\n       x = \"Day\",\n       y = \"Occupancy (number)\") +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Set1\")\n```\n\nThis perhaps gives us some idea of what is going on. Let's just check February and see if it looks similar (Figure \\@ref(fig:sheltersinfeb2017)).\n\n```{r sheltersinfeb2017, fig.cap = \"Daily occupancy in Toronto shelters in February 2017\"}\ntoronto_shelters_by_day %>% \n  filter(year(date) == 2017) %>%\n  filter(month(date) == 2) %>% \n  ggplot(aes(x = day(date), y = occupancy, color = sector)) + \n  geom_point(aes(group = sector)) +\n  scale_y_continuous(limits = c(0, NA)) +\n  labs(color = \"Type\",\n       x = \"Day\",\n       y = \"Occupancy (number)\") +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Set1\")\n```\n\nWe've clearly got a problem with the first twelve days of the month. We noted at the start that when you look at the data it's a bit odd in that it's not in order. Let's take another look at that by going back to the data as it was given to us (as opposed to the data by day that we've been using) (Figure \\@ref(fig:sheltersin2017byrow)).\n\n```{r sheltersin2017byrow, fig.cap = \"Date of each row in order in 2017\"}\ntoronto_shelters %>% \n  mutate(counter = 1:nrow(toronto_shelters)) %>% \n  filter(year(date) == 2017) %>% \n  ggplot(aes(x = counter, y = date)) +\n  geom_point(alpha = 0.3) +\n  labs(x = \"Row in the dataset\",\n       y = \"Date of that row\") +\n  theme_minimal()\n```\n\nAlthough there's no rule that says the dataset has to be in order of the date, if it were, then all the points would lie on the diagonal line. We have a lot of deviation from that. To get a sense of what we're expecting let's look at all four years (Figure \\@ref(fig:sheltersdatebyrow)).\n\n```{r sheltersdatebyrow, fig.cap = \"Date of each row in order (2017-2020)\"}\ntoronto_shelters %>% \n  mutate(counter = 1:nrow(toronto_shelters)) %>% \n  ggplot(aes(x = counter, y = date)) +\n  geom_point(alpha = 0.3) +\n  facet_wrap(vars(year(date)),\n             scales = \"free\") +\n  labs(x = \"Row in the dataset\",\n       y = \"Date of that row\") +\n  theme_minimal()\n```\n\nIt looks like 2020 is as we'd expect. 2019 has a few odd situations, but not too many. 2018 has a small cluster early in the dataset and then possibly something systematic toward the middle. But it's clear that 2017 has a large number of systematic issues.\n\nIn general, I think that in 2017 the first 12 days are the wrong way around, i.e we think it's year-month-day, but it's actually year-day-month, but there are exceptions. As a first pass, let's just try to flip those first 12 days of each month and see if that helps. It'll be fairly blunt, but hopefully gets us somewhere.\n\n```{r}\ntoronto_shelters <- \n  toronto_shelters %>% \n  mutate(\n    year = year(date),\n    month = month(date),\n    day = day(date),\n    date = as.character(date),\n    changed_date = if_else(\n      date %in% c(\"2017-02-01\", \"2017-03-01\", \"2017-04-01\", \"2017-05-01\", \"2017-06-01\", \n                  \"2017-07-01\", \"2017-08-01\", \"2017-09-01\", \"2017-10-01\", \"2017-11-01\", \n                  \"2017-12-01\", \"2017-01-02\", \"2017-03-02\", \"2017-04-02\", \"2017-05-02\", \n                  \"2017-06-02\", \"2017-07-02\", \"2017-08-02\", \"2017-09-02\", \"2017-10-02\", \n                  \"2017-11-02\", \"2017-12-02\", \"2017-01-03\", \"2017-02-03\", \"2017-04-03\", \n                  \"2017-05-03\", \"2017-06-03\", \"2017-07-03\", \"2017-08-03\", \"2017-09-03\", \n                  \"2017-10-03\", \"2017-11-03\", \"2017-12-03\", \"2017-01-04\", \"2017-02-04\", \n                  \"2017-03-04\", \"2017-05-04\", \"2017-06-04\", \"2017-07-04\", \"2017-08-04\", \n                  \"2017-09-04\", \"2017-10-04\", \"2017-11-04\", \"2017-12-04\", \"2017-01-05\", \n                  \"2017-02-05\", \"2017-03-05\", \"2017-04-05\", \"2017-06-05\", \"2017-07-05\", \n                  \"2017-08-05\", \"2017-09-05\", \"2017-10-05\", \"2017-11-05\", \"2017-12-05\", \n                  \"2017-01-06\", \"2017-02-06\", \"2017-03-06\", \"2017-04-06\", \"2017-05-06\", \n                  \"2017-07-06\", \"2017-08-06\", \"2017-09-06\", \"2017-10-06\", \"2017-11-06\", \n                  \"2017-12-06\", \"2017-01-07\", \"2017-02-07\", \"2017-03-07\", \"2017-04-07\", \n                  \"2017-05-07\", \"2017-06-07\", \"2017-08-07\", \"2017-09-07\", \"2017-10-07\", \n                  \"2017-11-07\", \"2017-12-07\", \"2017-01-08\", \"2017-02-08\", \"2017-03-08\", \n                  \"2017-04-08\", \"2017-05-08\", \"2017-06-08\", \"2017-07-08\", \"2017-09-08\", \n                  \"2017-10-08\", \"2017-11-08\", \"2017-12-08\", \"2017-01-09\", \"2017-02-09\", \n                  \"2017-03-09\", \"2017-04-09\", \"2017-05-09\", \"2017-06-09\", \"2017-07-09\", \n                  \"2017-08-09\", \"2017-10-09\", \"2017-11-09\", \"2017-12-09\", \"2017-01-10\", \n                  \"2017-02-10\", \"2017-03-10\", \"2017-04-10\", \"2017-05-10\", \"2017-06-10\", \n                  \"2017-07-10\", \"2017-08-10\", \"2017-09-10\", \"2017-11-10\", \"2017-12-10\", \n                  \"2017-01-11\", \"2017-02-11\", \"2017-03-11\", \"2017-04-11\", \"2017-05-11\", \n                  \"2017-06-11\", \"2017-07-11\", \"2017-08-11\", \"2017-09-11\", \"2017-10-11\", \n                  \"2017-12-11\", \"2017-01-12\", \"2017-02-12\", \"2017-03-12\", \"2017-04-12\", \n                  \"2017-05-12\", \"2017-06-12\", \"2017-07-12\", \"2017-08-12\", \"2017-09-12\", \n                  \"2017-10-12\", \"2017-11-12\"),\n      paste(year, day, month, sep = \"-\"),\n      paste(year, month, day, sep = \"-\"),\n    ),\n    changed_date = ymd(changed_date)\n    ) %>% \n  select(-year, -month, -day)\n```\n\nNow let's take a look (Figure \\@ref(fig:sheltersdatebyrowadj)).\n\n```{r sheltersdatebyrowadj, fig.cap = \"Date of each row in order in 2017 after adjustment\"}\ntoronto_shelters %>% \n  mutate(counter = 1:nrow(toronto_shelters)) %>% \n  filter(year(date) == 2017) %>% \n  ggplot(aes(x = counter, y = changed_date)) +\n  geom_point(alpha = 0.3) +\n  labs(x = \"Row in the dataset\",\n       y = \"Date of that row\") +\n  theme_minimal()\n```\n\nWe can see that's almost entirely taken care of the systematic differences. However it's probably a little blunt. For instance, notice there are now no entries below the diagonal (Figure \\@ref(fig:sheltersdatebyrowadj2017)).\n\n```{r sheltersdatebyrowadj2017, fig.cap = \"Toronto shelters daily occupancy in 2017 after adjustment\"}\ntoronto_shelters_adjusted <- \n  toronto_shelters %>% \n  # We only want rows with occupancy\n  tidyr::drop_na(occupancy, capacity) %>% \n  # We want to know the occupancy by date and sector\n  group_by(changed_date, sector) %>% \n  summarise(occupancy = sum(occupancy), .groups = 'drop') \n\ntoronto_shelters_adjusted %>% \n  filter(year(changed_date) == 2017) %>% \n  ggplot(aes(x = day(changed_date), y = occupancy, color = sector)) + \n  geom_point(aes(group = sector), alpha = 0.3) +\n  scale_y_continuous(limits = c(0, NA)) +\n  labs(color = \"Type\",\n       x = \"Changed day\",\n       y = \"Occupancy (number)\") +\n  facet_wrap(vars(month(changed_date, label = TRUE)),\n             scales = \"free_x\") +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Set1\")\n```\n\nWe could keep going here to try to get to the bottom of it, but the baby is going to wake up soon and I've got a history of wasting too much time on these types of things. One of the great things about the City of Toronto Data Portal is that each dataset has a publisher and a contact email. I'll email them and will update this when they get back to me.\n  \n  \n  \n  \n\n## Model\n\n\n\n> ...With a laptop, some free software, and a cup of coffee, I can examine what ought to seem like a staggering amount of information. ...I sit here at home, surveying the scope of what's being inflicted on people across the country and around the world as this disease spreads. ...\n>... People sometimes think (or complain) that working with quantitative data like this inures you to the reality of the human lives that lie behind the numbers. Numbers and measures are crude; they pick up the wrong things; they strip out the meaning of what's happening to real people; they make it easy to ignore what can't be counted. \n>There's something to those complaints. But it's mostly a lazy critique. In practice, I find that far from distancing you from questions of meaning, quantitative data forces you to confront them. The numbers draw you in. Working with data like this is an unending exercise in humility, a constant compulsion to think through what you can and cannot see, and a standing invitation to understand what the measures really captureâ€”what they mean, and for whom. ...\"\n>\n> Kieran Healy, 2020, The Kitchen Counter Observatory, 21 May.\n> https://kieranhealy.org/blog/archives/2020/05/21/the-kitchen-counter-observatory/\n\n\nLet's start by looking at the effect of COVID on occupancy. On 17 March Ontario declared a state of emergency, so let's focus on the time around then (Figure \\@ref(fig:focuson2020) includes a dashed line at that point).\n\n```{r focuson2020, fig.cap = \"Shelter usage in 2020\"}\ntoronto_shelters_adjusted %>% \n  filter(year(changed_date) == 2020) %>%\n  ggplot(aes(x = changed_date, y = occupancy, color = sector)) + \n  geom_point(aes(group = sector), alpha = 0.3) +\n  geom_vline(xintercept = ymd(\"2020-03-17\"), linetype = 'dotted')+\n  scale_y_continuous(limits = c(0, NA)) +\n  labs(color = \"Type\",\n       x = \"Changed date\",\n       y = \"Occupancy (number)\") +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Set1\")\n```\n\n\nIt's clear that soon after the state of emergency was declared the usage of shelters began to decrease. Understandably the homeless, like all of us, want to socially distance to the extent possible and this likely means avoiding shelters. If you live in Toronto one thing that you'll notice is that there are a lot of homeless people living in parks since COVID started. While this was fine in summer, the issue is that in winter it is well below 0C overnight.\n\nWe might like to see if we can estimate how many additional people are sleeping outside in January. We'll do this by comparing the number that slept in the shelters in January 2021, compared with the number in the shelters in January 2020, which is before COVID hit Toronto. As Kieran Healy says, an exercise like this is confronting. \n\nWhile it's a stretch to say that if they're not sleeping in a shelter then they must be sleeping outside, it's also not clear where else they could be if they're not in a shelter. It's possible that they have found permanent housing and so are no longer using shelters, however I don't know of any substantial change in public policy or resource allocation such that the whole difference is due to people finding permanent homes.\n\nWe'll use the data that the city has so far released for 2021. The data provider warns us against using capacity, so we'll focus on occupancy. \n\n```{r, eval=F, echo=T}\ncurrent_data <- opendatatoronto::get_resource(\"29852011-c9c2-4b6d-a79a-b718f5ed1ae2\")\n\nwrite_csv(current_data, \"inputs/raw_data-January.csv\")\n```\n\n\n```{r}\ncurrent_data <- read_csv(\"inputs/raw_data-January.csv\", \n                         col_types = c(\"icccicccicccc\")) \n\nhead(current_data)\n```\n\nJust want to do the same basic clean up of the dates as before.\n\n```{r}\ncurrent_data <- \n  current_data %>% \n  janitor::clean_names() %>% # Make the column names easier to type. Thanks Sharla!\n  mutate(occupancy_date = str_remove(occupancy_date, \"T[:digit:]{2}:[:digit:]{2}:[:digit:]{2}\"),\n  ) %>% \n  mutate(date = ymd(occupancy_date, quiet = TRUE))\nhead(current_data)\n```\n\nFor each day we want to know the number in each category. We're then going to compare this to this time last year. \n\n```{r}\ntoronto_shelters_by_day_current <- \n  current_data %>% \n  # We only want rows with occupancy\n  tidyr::drop_na(occupancy) %>% \n  # We want to know the occupancy by date and sector\n  group_by(date, sector) %>% \n  summarise(occupancy = sum(occupancy), .groups = 'drop') %>% \n  mutate(month_day = paste(month(date), day(date), sep = \"-\")) %>% \n  rename(occupancy_2021 = occupancy)\n\nhead(toronto_shelters_by_day_current)\n```\n\n\n```{r}\ntoronto_shelters_by_day_2020 <- \n  toronto_shelters %>% \n  # We only want rows with occupancy\n  tidyr::drop_na(occupancy, capacity) %>% \n  # We want to know the occupancy by date and sector\n  group_by(changed_date, sector) %>% \n  summarise(occupancy = sum(occupancy), .groups = 'drop') %>% \n  filter(year(changed_date) == 2020) %>% \n  mutate(month_day = paste(month(changed_date), day(changed_date), sep = \"-\")) %>% \n  # Don't have to rename but it makes the join easier\n  rename(date = changed_date, \n         occupancy_2020 = occupancy)\n\nhead(toronto_shelters_by_day_2020)\n```\n\nNow we're going to combine the datasets so that for each day, say '4 January', we know that in 2020 shelter usage was X and on that day in 2021 we know that shelter usage was Y (Table \\@ref(tab:jandaily)).\n\n```{r jandaily}\ntoronto_shelters_by_day_current <- \n  toronto_shelters_by_day_current %>% \n  left_join(toronto_shelters_by_day_2020, by = c(\"month_day\" = \"month_day\", \"sector\" = \"sector\")) %>% \n  rename(date = date.x) %>% \n  select(date, sector, occupancy_2020, occupancy_2021) %>% \n  mutate(difference = occupancy_2021 - occupancy_2020)\n\n\ntoronto_shelters_by_day_current %>% \n  rename(Date = date,\n         Sector = sector,\n         `Occupancy in 2020` = occupancy_2020,\n         `Occupancy in 2021` = occupancy_2021,\t\n         Difference = difference) %>% \n  kableExtra::kbl(caption = \"Comparison of shelter usage in January 2021 with January 2020 by day\") %>%\n  kableExtra::kable_styling()\n```\n\nLet's get some average statistics for January by sector (Table \\@ref(tab:janaverage)).\n\n```{r janaverage}\njanuary_average <- \n  toronto_shelters_by_day_current %>% \n  group_by(sector) %>% \n  summarise(Difference = mean(difference)) %>% \n  mutate(Difference = as.integer(Difference))\n\njanuary_average %>% \n  rename(Sector = sector,\n         `Difference this January compared with last` = Difference) %>% \n  kableExtra::kbl(caption = \"Overall comparison of shelter usage in January 2021 with January 2020\") %>%\n  kableExtra::kable_styling()\n```\n\nLet's look at a comparison graph (Figure \\@ref(fig:finalgraph)).\n\n```{r finalgraph, fig.cap = \"Comparison of shelter usage in January 2021 with January 2020\"}\ntoronto_shelters_by_day_current %>% \n  select(-difference) %>% \n  pivot_longer(cols = c(\"occupancy_2020\", \"occupancy_2021\"),\n               names_to = \"year\",\n               values_to = \"number\"\n               ) %>% \n  mutate(year = if_else(year == 'occupancy_2020', '2020', '2021')) %>% \n  ggplot(aes(x = date, y = number, color = year)) +\n  geom_point() +\n  facet_wrap(vars(sector)) +\n  theme_minimal() +\n  labs(x = \"Date\",\n       y = \"Occupancy in shelters (#)\",\n       color = \"Year\")  +\n  scale_color_brewer(palette = \"Set1\")\n```\n\n\nI estimate that in January, on average, there are roughly 3,517 additional people sleeping outside in below freezing conditions this year compared with last year. That is to say, shelter usage is that much below what it was, and I'm not sure where else they could go. In particular, on Friday night, when it was horrendously cold, I estimate there were 3,634 additional people likely sleeping outside, by comparing the usage of shelters on 22 January 2020 with 22 January 2021.\n\nEven if I'm off by an order of magnitude, the city and province clearly should do more.\n\n\n## Acknowledgments {.appendix}\n\nThank you to Monica Alexander for helpful comments.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":{"distill::distill_article":{"self_contained":false,"toc":true,"toc_depth":3}},"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"toronto-shelter-usage.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Danger","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.266","theme":"cosmo","title":"Shelter usage in Toronto (2017-2021)","description":"I look at Toronto shelter usage numbers between 2017 and January 2021. I document and adjust for a systematic error in the 2017 data. The data show that homelessness in Toronto is a large problem; essentially all shelters are almost always full. COVID changed the nature of the problem by reducing the number of people using shelters, however they must be sleeping somewhere. I compare January 2021 with January 2020 and estimate that following COVID there are now around an additional 3,500 people sleeping somewhere outside of shelters, possibly outdoors.\n","author":[{"name":"Rohan Alexander","url":{"rohanalexander.com":null}}],"date":"2021-01-24","draft":false,"bibliography":["references.bib"],"collections":{"posts":{"citations":false}}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}