{"title":"Getting started with MRP","markdown":{"yaml":{"title":"Getting started with MRP","description":"Multi-level regression with post-stratification (MRP) is a popular way to adjust non-representative samples to better analyse opinion and other survey responses. I recently ran a hands-on workshop at the ANU, aimed at interested, but not experienced, social scientists to help de-mystify MRP. The workshop aimed to give participants the ability and confidence to: 1) critically read papers that use it; and 2) apply it in their own work. Examples of how to implement MRP were illustrated in R using the brms package. The following post gives the outline of the workshop and the material and coding exercises covered.\n","author":[{"name":"Rohan Alexander"}],"date":"2019-12-03","output":{"distill::distill_article":{"self_contained":false,"toc":true,"toc_depth":2}}},"headingText":"Overview","containsRefs":false,"markdown":"\n\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\nMulti-level regression with post-stratification (MRP) is a popular way to adjust non-representative samples to better analyse opinion and other survey responses. It uses a regression model to relate individual-level survey responses to various characteristics and then rebuilds the sample to better match the population. In this way MRP can not only allow a better understanding of responses, but also allow us to analyse data that may otherwise be unusable. However, it can be a challenge to get started with MRP as the terminology may be unfamiliar, and the data requirements can be onerous.\n\nThe purpose of this hands-on workshop is to de-mystify MRP and give participants the ability and confidence to: 1) critically read papers that use it; and 2) apply it in their own work. Examples of how to implement MRP will be illustrated in R using the brms package. No experience with R is required but workshop participants should bring a laptop that is: a) connected to the internet; b) has R and R Studio installed, along with the tidyverse and brms packages (if you have a hassle doing this then come early to the workshop and I can help you).\n\nThe GitHub repo that you should download is: https://github.com/RohanAlexander/mrp_workshop.\n\n# Schedule\n\n- 8:45 - 9:00: (Optional) Help with computer set-up.\n- 9:00 - 9:15: Introduction, motivation, and example.\n- 9:15 - 9:25: Live-coding introductory example.\n- 9:25 - 9:45: Participants pair-code introductory example.\n- 9:45 - 9:55: Live coding extended example.\n- 10:00 - 10:30: Participants pair-code extended example.\n- 10:30 - 10:50: Live example improving the workflow: gathering data from the ABS, improving the model, and communicating results.\n- 10:50 - 11:00: Concluding remarks about strengths, weaknesses, and potential areas of application.\n\n\n# Help with computer set-up.\nThe primary programming language used for MRP tends to be R, but any similar language would be fine. That said, if you are already comfortable with another open source language, such as Python, then it wouldn't hurt to learn R as well. You are welcome to use whatever language you are most comfortable with, but it will be easiest for you to be able to draw on other examples if you use R. All of the examples in this workshop are in R.\n\n## Computing\nR can be downloaded for free from: http://cran.utstat.utoronto.ca/.\n\nRStudio is an interface that makes using R easier and it can be downloaded for free from: https://rstudio.com/products/rstudio/download/.\n\nWe will use brms later in the tutorial. In order to use this your Mac needs to have Xcode and a bunch of other things installed. To do this go to:\nhttps://github.com/rmacoslib/r-macos-rtools#how-do-i-use-the-installer and within the 'assets' bit of the project's release page, download 'macos-rtools-3.1.0.pkg' and then install that. It'll take a few minutes because it is downloading and setting up a bunch of things.\n\n\n\n## Getting help\nAt some point your code won't run or will throw an error. This is normal, and it happens to everyone. It happens to me on a daily, sometimes hourly, basis. Getting frustrated is understandable. There are a few steps that are worthwhile taking when this happens:\n\n- If you are having issues with a particular function then the Help file for that function can be accessed by adding a ? to the front. e.g. '?lm'.\n-\tIf you're getting an error then try googling it, (I find it can help to include the term ‘R' and 'MRP' or ‘tidyverse' or the relevant package name). \n-\tIf your code just isn't running, then try searching for what you are trying to do, e.g. ‘save PDF of graph in R made using ggplot'. Almost always there are relevant blog posts or Stack Overflow answers that will help.\n-\tTry to restart R and R Studio and load everything again.\n-\tTry to restart your computer. \n\nThere are a few small mistakes that I often make and may be worth checking in case you make them too: \n\n-\tcheck the class e.g. class(my_dataset$its_column) to make sure that is what it should be; \n-\twhen you're using ggplot make sure you use ‘+' not ‘%>%'; \n-\tcheck whether you are using ‘.' when you shouldn't be, or vice versa.\n\nIt's almost always helpful to take a break and come back the next day.\n\n\n# Introduction, motivation, and example\nMulti-level regression with post-stratification (MRP) is a handy approach when dealing with survey data. Essentially, it trains a model based on the survey, and then applies that trained model to another dataset. There are two main, related, advantages:\n\n1) It can allow us to 're-weight' in a way that includes uncertainty front-of-mind and isn't hamstrung by small samples.\n2) It can allow us to use broad surveys to speak to subsets.\n\nFrom a practical perspective, it tends to be less expensive to collect non-probability samples and so there are benefits of being able to use these types of data. That said, it is not a magic-bullet and the laws of statistics still apply. We will have larger uncertainty around our estimates and they will still be subject to all the usual biases. As [Lauren Kennedy](https://twitter.com/jazzystats) points out, 'MRP has traditionally been used in probability surveys and had potential for non-probability surveys, but we're not sure of the limitations at the moment.' \n\nOne famous example is Wei Wang, David Rothschild, Sharad Goel, and Andrew Gelman, 2014, 'Forecasting elections with non-representative polls', *International Journal of Forecasting*. They used data from the Xbox gaming platform to forecast the 2012 US Presidential Election.\n\nKey facts about the set-up:\n\n- Data from an opt-in poll which was available on the Xbox gaming platform during the 45 days preceding the 2012 US presidential election.\n- Each day there were three to five questions, including voter intention: \"If the election were held today, who would you vote for?\"\n- Respondents were allowed to answer at most once per day.\n- First-time respondents were asked to provide information about themselves, including their sex, race, age, education, state, party ID, political ideology, and who they voted for in the 2008 presidential election. \n- In total, 750,148 interviews were conducted, with 345,858 unique respondents - over 30,000 of whom completed five or more polls\n- Young men dominate the Xbox population: 18-to-29-year-olds comprise 65 per cent of the Xbox dataset, compared to 19 per cent in the exit poll; and men make up 93 per cent of the Xbox sample but only 47 per cent of the electorate.\n\nGiven the US electorate, they use a two-stage modelling approach. The details don't really matter too much, and essentially they model how likely a respondent is to vote for Obama, given various information such as state, education, sex, etc:\n$$\nPr\\left(Y_i = \\mbox{Obama} | Y_i\\in\\{\\mbox{Obama, Romney}\\}\\right) = \\mbox{logit}^{-1}(\\alpha_0 + \\alpha_1(\\mbox{state last vote share}) \n+ \\alpha_{j[i]}^{\\mbox{state}} + \\alpha_{j[i]}^{\\mbox{edu}} + \\alpha_{j[i]}^{\\mbox{sex}}...\n)\n$$\nThey run this in R using glmer() from lme4.\n\nHaving a trained model that considers the effect of these various independent variables on support for the candidates, they now post-stratify, where each of these \"cell-level estimates are weighted by the proportion of the electorate in each cell and aggregated to the appropriate level (i.e., state or national).\" \n\nThis means that they need cross-tabulated population data. In general, the census would have worked, or one of the other large surveys available in the US, but the difficulty is that the variables need to be available on a cross-tab basis. As such, they use exit polls (not an option for Australia in general).\n\nThey make state-specific estimates by post-stratifying to the features of each state.\n![State estimates from the Xbox paper.](inputs/figures/states.png)\n\nSimilarly, they can examine demographic-differences.\n![Demographic differences from the Xbox paper.](inputs/figures/demographics.png)\n\nFinally, they convert their estimates into electoral college estimates.\n![Electoral College estimates from the Xbox paper.](inputs/figures/electoral_college.png)\n\n\n\n# Live-coding introductory example\n\nThe workflow that we are going to use is: \n\n1) read in the poll;\n2) model the poll; \n3) read in the post-stratification data; and\n4) apply the model to the post-stratification data.\n\nFirst load the packages.\n\n```{r initial_model_workplace_setup, message=FALSE, warning=FALSE}\n# Uncomment these (by deleting the #) if you need to install the packages\n# install.packages(\"broom\")\n# install.packages(\"here\")\n# install.packages(\"skimr\")\n# install.packages(\"tidyverse\")\n\nlibrary(broom) # Helps make the regression results tidier\nlibrary(here) # Helps make file referencing easier.\nlibrary(skimr) # Helps summarise the data\nlibrary(tidyverse) # Helps make programming with R easier\n```\n\nThen load some sample polling data to analyse. I have generated this fictitious data so that we have some idea of what to expect from the model. The dependent variable is supports_ALP, which is a binary variable - either 0 or 1. We'll just use two independent variables here: gender, which is either Female or Male (as that is what is available from the ABS); and age_group, which is one of four groups: ages 18 to 29, ages 30 to 44, ages 45 to 59, ages 60 plus.\n\n```{r initial_model_simulate_data, message=FALSE,}\nexample_poll <- read_csv(\"outputs/data/example_poll.csv\") # Here we read in a \n# CSV file and assign it to a dataset called 'example_poll'\n\nhead(example_poll) # Displays the first 10 rows\n\n# Look at some summary statistics to make sure the data seem reasonable\nsummary(example_poll) \nskimr::skim(example_poll)\n```\n\nI generated this polling data to make both made males and older people less likely to vote for the Australian Labor Party; and females and younger people more likely to vote for the Labor Party. Females are over-sampled. As such, we should have an ALP skew on the dataset.\n\n```{r summarise_model_simulate_data, message=FALSE,}\n# The '%>%' is called a 'pipe' and it takes whatever the output is of the \n# command before it, and pipes it to the command after it.\nexample_poll %>% # So we are taking our example_poll dataset and using it as an \n  # input to 'summarise'.\n   # summarise reduces the dimensions, so here we will get one number from a column.\n  summarise(raw_ALP_prop = sum(supports_ALP) / nrow(example_poll))\n```\n\nNow we'd like to see if we can get our results back (we should find females less likely than males to vote for Australian Labor Party and that people are less likely to vote Australian Labor Party as they get older). Our model is:\n$$\n\\mbox{ALP support}_j = \\mbox{gender}_j + \\mbox{age_group}_j + \\epsilon_j.\n$$\n\nThis model says that the probability that some person, $j$, will vote for the Australian Labor Party depends on their gender and their age-group. Based on our simulated data, we would like older age-groups to be less likely to vote for the Australian Labor Party and for males to be less likely to vote for the Australian Labor Party.\n\n```{r initial_model_analyse_example_polling}\n# Here we are running an OLS regression with supports_ALP as the dependent variable \n# and gender and age_group as the independent variables. The dataset that we are \n# using is example_poll. We are then saving that OLS regression to a variable called 'model'.\nmodel <- lm(supports_ALP ~ gender + age_group, \n            data = example_poll\n            )\n\n# broom::tidy just displays the outputs of the regression in a nice table.\nbroom::tidy(model) \n```\n\n\n\nEssentially we've got our inputs back. We just used regular OLS even though our dependent variable is a binary. (It's usually fine to start with an OLS model and then iterate toward an approach that may be more appropriate such as logistic regression or whatever, but where the results are a little more difficult to interpret.) If you wanted to do that then the place to start would be glmer() from the R package lme4, and we'll see that in the next section.\n\n<aside>\n[Monica](https://www.monicaalexander.com/) is horrified by the use of OLS here, and wants it on the record that she regrets not making not doing this part of our marriage vows.\n</aside>\n\nNow we'd like to see if we can use what we found in the poll to get an estimate for each state based on their demographic features.\n\nFirst read in some real demographic data, on a seat basis, from the ABS (we'll go into the process of getting this later).\n\n```{r initial_model_post_stratify_add_coefficients, message=FALSE, warning=FALSE}\ncensus_data <- read_csv(\"outputs/data/census_data.csv\")\nhead(census_data)\n```\n\nWe're just going to do some rough forecasts. For each gender and age_group we want the relevant coefficient in the example_data and we can construct the estimates.\n\n```{r initial_model_post_stratify_age_sex_specific}\n# Here we are making predictions using our model with some new data from the \n# census, and we saving the results of those predictions by adding a new column \n# to the census_data dataset called 'estimate'.\ncensus_data$estimate <- \n  model %>% \n  predict(newdata = census_data)\n\ncensus_data %>% \n  mutate(alp_predict_prop = estimate*cell_prop_of_division_total) %>% \n  group_by(state) %>% \n  summarise(alp_predict = sum(alp_predict_prop))\n```\n\nWe now have post-stratified estimates for each division. Our model has a fair few weaknesses. For instance small cell counts are going to be problematic. And our approach ignores uncertainty, but now that we have something working we can complicate it.\n\n\n\n# Participants pair-code introductory example\n*Please break into pairs and with one person 'driving' (typing) and the other person 'navigating', and attempt to pair-code the introductory example.*\n\nIf you run into issues then I am happy to help point you in the right direction. The full code of the example will be made available after the workshop, so it doesn't matter if you're not able to complete the example now.\n\nAs a reminder, our workflow is: \n\n1) read in the poll;\n2) model the poll; \n3) read in the post-stratification data;\n4) apply your model to the post-stratification data.\n\nGet started by opening the Rproj file from the workshop repo and opening a new R script.\n\n# Live coding extended example\n\nWe'd like to address some of the major issues with our approach, specifically being able to deal with small cell counts, and also taking better account of uncertainty. As we are dealing with survey data, prediction intervals or something similar are crticial, and it's not appropriate to only report central estimates. To do this we'll use the same broad approach as before, but just improving bits of our workflow.\n\nFirst load the packages.\n\n```{r brms_model_workplace_setup, message=FALSE, warning=FALSE}\n# Uncomment these if you need to install the packages\n# install.packages(\"broom\")\n# install.packages(\"brms\")\n# install.packages(\"here\") \n# install.packages(\"tidybayes\")\n# install.packages(\"tidyverse\") \n\nlibrary(broom)\nlibrary(brms) # Used for the modelling\nlibrary(here)\nlibrary(tidybayes) # Used to help understand the modelling estimates\nlibrary(tidyverse) \n```\n\nAs before, read in the polling dataset.\n\n```{r brms_model_simulate_data, message=FALSE,}\nexample_poll <- read_csv(\"outputs/data/example_poll.csv\")\n\nhead(example_poll)\n```\n\nNow, using the same basic model as before, but we move it to a setting that acknowledges the dependent variable as being binary, and in a Bayesian setting.\n\n```{r brms_model_analyse_example_polling}\nmodel <- brm(supports_ALP ~ gender + age_group, \n             data = example_poll, \n             family = bernoulli(),\n             file = \"outputs/model/brms_model\"\n             )\n\nmodel <- read_rds(\"outputs/model/brms_model.rds\")\n\nsummary(model)\n```\n\nWe've moved to the Bernoulli distribution, so we have to do a bit more work to understand our results, but we are broadly getting back what we'd expect.\n\nAs before, we'd like an estimate for each state based on their demographic features and start by reading in the data.\n\n```{r brms_model_post_stratify_add_coefficients, message=FALSE, warning=FALSE}\ncensus_data <- read_csv(\"outputs/data/census_data.csv\")\nhead(census_data)\n```\n\nWe're just going to do some rough forecasts. For each gender and age_group we want the relevant coefficient in the example_data and we can construct the estimates (this code is from Monica Alexander, https://www.monicaalexander.com/posts/2019-08-07-mrp/).\n\n```{r brms_model_post_stratify_age_sex_specific}\npost_stratified_estimates <- \n  model %>% \n  tidybayes::add_predicted_draws(newdata = census_data) %>% \n  rename(alp_predict = .prediction) %>% \n  mutate(alp_predict_prop = alp_predict*cell_prop_of_division_total) %>% \n  group_by(state, .draw) %>% \n  summarise(alp_predict = sum(alp_predict_prop)) %>% \n  group_by(state) %>% \n  summarise(mean = mean(alp_predict), \n            lower = quantile(alp_predict, 0.025), \n            upper = quantile(alp_predict, 0.975))\n\npost_stratified_estimates\n```\n\nWe now have post-stratified estimates for each division. Our new Bayesian approach will enable us to think more deeply about uncertainty. We could complicate this in a variety of ways including adding more coefficients (but remember that we'd need to get new cell counts), or adding some layers.\n\n\n# Participants pair-code extended example\n*Please break into the same pairs as before, but swap who is typing, and attempt to pair-code the extended example.*\n\nIf you run into issues then I am happy to help point you in the right direction. The full code of the example will be made available after the workshop, so it doesn't matter if you're not able to complete the example now.\n\nAs a reminder, our workflow is: \n\n1) read in the poll;\n2) model the poll; \n3) read in the post-stratification data;\n4) apply your model to the post-stratification data.\n\n\n# Live coding\nI will now briefly demonstrate some other aspects that may be useful to improve three aspects of our MRP workflow: \n\n1) (Workflow step 2) adding some more complexity to our model; and\n2) (Workflow step 3) gathering and preparing some data from the ABS that we could use to post-stratify on.\n\nWe will also add a fifth stage to our workflow: Communicating our results.\n\n\n\n## Adding layers\nWe may like to try to add some layers to our model. For instance, we may like a different intercept for each state.\n\n```{r brms_model_analyse_extended}\nmodel_states <- brm(supports_ALP ~ gender + age_group + (1|state), \n                    data = example_poll, \n                    family = bernoulli(),\n                    file = \"outputs/model/brms_model_states\",\n                    control = list(adapt_delta = 0.90)\n                    )\nsummary(model_states)\nbroom.mixed::tidy(model_states, par_type = \"varying\")\nbroom.mixed::tidy(model_states, par_type = \"non-varying\", robust = TRUE)\n\n```\n\nOne interesting aspect is that our multi-level approach will allow us to deal with small cell counts by borrowing information from other cells. \n\n```{r brms_model_analyse_extended_state_counts}\nexample_poll %>% \n  count(state)\n```\n\nAt the moment we have 50 respondents in the Northern Territory, 105 in Tasmania, and 107 in the ACT. Even if we were to remove most of the, say, 18 to 29 year old, male respondents from Tasmania our model would still provide estimates. It does this by pooling, in which the effect of these young, male, Tasmanians is partially determined by other cells that do have respondents. \n\n\n\n## Gathering data\nGetting data tends to be the most troublesome aspect. I've found that the census is fairly useful although it can require some trade-offs (e.g. if you are doing political work then it's not exactly the same as the electoral roll even if you restrict it to Australian citizens aged at least 18). Nonetheless, I've found the best way to get the sub-cell counts is to use ABS TableBuilder. There are two versions - 'basic' which is free, and 'pro', which is normally $2,510 per year, but which you can get access to if you're associated with an Australian university. \n\n![TableBuilder front page.](inputs/figures/tablebuilder.png)\n\nOnce you create an account then you can access census data for 2006, 2011, and 2016. (The ABS have relatively recently done some linking between censuses so there is actually some linked data, which is exciting).\n\n![TableBuilder after logging in.](inputs/figures/census_select_type.png)\n\nThe website is a bit cumbersome, but considering what they provide it is worth sticking with it. I usually use 'Counting Persons, Place of Usual Residence', but sometimes 'Counting Persons, Place of Enumeration' is also handy.\n\n![TableBuilder selecting which census.](inputs/figures/census_type.png)\n\nWe want to create a new table, and we do this by specifying the columns and rows.\n\n![TableBuilder selecting columns.](inputs/figures/census_cols.png)\n\nOnce you have the set-up that you want then you can retrieve the data. \n\n![TableBuilder selecting rows.](inputs/figures/census_rows.png)\n\nYou can download the data in various Excel, CSV, and other formats. If your dataset is large then you may need to submit for it to be built, which can take a day or two. Finally, if your sub-cell counts are especially small, then they will be blown around by the randomness that the ABS adds.\n\n![TableBuilder downloading data and creating custom groups.](inputs/figures/census_download.png)\n\nHelpfully you can create custom groupings for geography, say to load specific electorates, and other aspects, such as age-groups. To get started with this, select 'Custom data'.\n\n\n## Communication\nThere are many interesting aspects that we may like to communicate to others. For instance, we may like to show how the model is affecting the results. We can make a graph that compares the raw estimate with the model estimate.\n\n```{r}\npost_stratified_estimates %>% \n  ggplot(aes(y = mean, x = forcats::fct_inorder(state), color = \"MRP estimate\")) + \n  geom_point() +\n  geom_errorbar(aes(ymin = lower, ymax = upper), width = 0) + \n  ylab(\"Proportion ALP support\") + \n  xlab(\"State\") + \n  geom_point(data = example_poll %>% \n               group_by(state, supports_ALP) %>%\n               summarise(n = n()) %>% \n               group_by(state) %>% \n               mutate(prop = n/sum(n)) %>% \n               filter(supports_ALP==1), \n             aes(state, prop, color = \"Raw data\")) +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Set1\") +\n  theme(legend.position = \"bottom\") +\n  theme(legend.title = element_blank())\n```\n\nSimilarly, we may like to plot the distribution of the coefficients.\n\n<aside>\nYou can work out which coefficients to be pass to gather_draws by using tidybayes::get_variables(model).\n(In this example I passed 'b_.', but the ones of interest to you may be different.)\n</aside>\n\n\n```{r}\nmodel %>%\n  gather_draws(`b_.*`, regex=TRUE) %>%\n  ungroup() %>%\n  mutate(coefficient = stringr::str_replace_all(.variable, c(\"b_\" = \"\"))) %>%\n  mutate(coefficient = forcats::fct_recode(coefficient,\n                                           Intercept = \"Intercept\",\n                                           `Is male` = \"genderMale\",\n                                           `Age 30-44` = \"age_groupages30to44\",\n                                           `Age 45-59` = \"age_groupages45to59\",\n                                           `Age 60+` = \"age_groupages60plus\"\n                                           )) %>% \n\n# both %>% \n  ggplot(aes(y=fct_rev(coefficient), x = .value)) + \n  ggridges::geom_density_ridges2(aes(height = ..density..),\n                                 rel_min_height = 0.01, \n                                 stat = \"density\",\n                                 scale=1.5) +\n  xlab(\"Distribution of estimate\") +\n  ylab(\"Coefficient\") +\n  scale_fill_brewer(name = \"Dataset: \", palette = \"Set1\") +\n  theme_minimal() +\n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n  theme(legend.position = \"bottom\")\n\n\n```\n\n\n# Concluding remarks\n\nIn general, MRP is a good way to accomplish specific aims, but it's not without trade-offs. If you have a good quality survey, then it may be a way to speak to disaggregated aspects of it. Or if you are concerned about uncertainty then it is a good way to think about that. If you have a biased survey then it's a great place to start, but it's not a panacea.\n\nThere's not a lot of work that's been done using Australian data, so there's plenty of scope for exciting work. I look forward to seeing what you do with it!\n\n\n\n# Next steps\n\nThere are a lot of resources out there that would make great next steps. I recommend having a look at the following resources to see which speaks best to your interests and background.\n\n1. Alexander, Monica, 2019, 'Analyzing name changes after marriage using a non-representative survey', available at: https://www.monicaalexander.com/posts/2019-08-07-mrp/.\n2. Kennedy, Lauren, and Jonah Gabry, 2019, 'MRP with rstanarm', available at: https://mc-stan.org/rstanarm/articles/mrp.html.\n3. Kennedy, Lauren, and Andrew Gelman, 2019, 'Know your population and know your model: Using model-based regression and poststratification to generalize findings beyond the observed sample', available at: https://arxiv.org/abs/1906.11323.\n4. Kastellec, Jonathan, Jeffrey Lax, and Justin Phillips, 2016, 'Estimating State Public Opinion With Multi-Level Regression and Poststratification using R', available at: https://scholar.princeton.edu/sites/default/files/jkastellec/files/mrp_primer.pdf. \n5. Hanretty, Chris, 2019, 'An introduction to multilevel regression and post-stratification for estimating constituency opinion', available at:  https://journals.sagepub.com/doi/abs/10.1177/1478929919864773.\n6. Downes, Marnie, Lyle Gurrin, Dallas English, Jane Pirkis, Dianne Currier, Matthew Spittal, and John Carlin, 2018, 'Multilevel Regression and Poststratification: A Modeling Approach to Estimating Population Quantities From Highly Selected Survey Samples', available at: https://www.ncbi.nlm.nih.gov/pubmed/29635276.\n7. Jackman, Simon, Shaun Ratcliff, and Luke Mansillo, 2019, 'Small area estimates of public opinion: Model-assisted post-stratification of data from voter advice applications', available at: https://www.cambridge.org/core/membership/services/aop-file-manager/file/5c2f6ebb7cf9ee1118d11c0a/APMM-2019-Simon-Jackman.pdf\n8. (Self-promotion alert) Alexander, Rohan, Patrick Dumont, and Patrick Leslie, 2019, 'Forecasting Multi-District Election', available at: https://github.com/RohanAlexander/ForecastingMultiDistrictElections.\n\nIf you don't have survey data, then there is some individual-level data available on the Australian Data Archive: https://ada.edu.au. You will need to request access to the datasets, but they are very keen for people to use their data and will help you through the process if needed. \n\n\n","srcMarkdownNoYaml":"\n\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n# Overview\nMulti-level regression with post-stratification (MRP) is a popular way to adjust non-representative samples to better analyse opinion and other survey responses. It uses a regression model to relate individual-level survey responses to various characteristics and then rebuilds the sample to better match the population. In this way MRP can not only allow a better understanding of responses, but also allow us to analyse data that may otherwise be unusable. However, it can be a challenge to get started with MRP as the terminology may be unfamiliar, and the data requirements can be onerous.\n\nThe purpose of this hands-on workshop is to de-mystify MRP and give participants the ability and confidence to: 1) critically read papers that use it; and 2) apply it in their own work. Examples of how to implement MRP will be illustrated in R using the brms package. No experience with R is required but workshop participants should bring a laptop that is: a) connected to the internet; b) has R and R Studio installed, along with the tidyverse and brms packages (if you have a hassle doing this then come early to the workshop and I can help you).\n\nThe GitHub repo that you should download is: https://github.com/RohanAlexander/mrp_workshop.\n\n# Schedule\n\n- 8:45 - 9:00: (Optional) Help with computer set-up.\n- 9:00 - 9:15: Introduction, motivation, and example.\n- 9:15 - 9:25: Live-coding introductory example.\n- 9:25 - 9:45: Participants pair-code introductory example.\n- 9:45 - 9:55: Live coding extended example.\n- 10:00 - 10:30: Participants pair-code extended example.\n- 10:30 - 10:50: Live example improving the workflow: gathering data from the ABS, improving the model, and communicating results.\n- 10:50 - 11:00: Concluding remarks about strengths, weaknesses, and potential areas of application.\n\n\n# Help with computer set-up.\nThe primary programming language used for MRP tends to be R, but any similar language would be fine. That said, if you are already comfortable with another open source language, such as Python, then it wouldn't hurt to learn R as well. You are welcome to use whatever language you are most comfortable with, but it will be easiest for you to be able to draw on other examples if you use R. All of the examples in this workshop are in R.\n\n## Computing\nR can be downloaded for free from: http://cran.utstat.utoronto.ca/.\n\nRStudio is an interface that makes using R easier and it can be downloaded for free from: https://rstudio.com/products/rstudio/download/.\n\nWe will use brms later in the tutorial. In order to use this your Mac needs to have Xcode and a bunch of other things installed. To do this go to:\nhttps://github.com/rmacoslib/r-macos-rtools#how-do-i-use-the-installer and within the 'assets' bit of the project's release page, download 'macos-rtools-3.1.0.pkg' and then install that. It'll take a few minutes because it is downloading and setting up a bunch of things.\n\n\n\n## Getting help\nAt some point your code won't run or will throw an error. This is normal, and it happens to everyone. It happens to me on a daily, sometimes hourly, basis. Getting frustrated is understandable. There are a few steps that are worthwhile taking when this happens:\n\n- If you are having issues with a particular function then the Help file for that function can be accessed by adding a ? to the front. e.g. '?lm'.\n-\tIf you're getting an error then try googling it, (I find it can help to include the term ‘R' and 'MRP' or ‘tidyverse' or the relevant package name). \n-\tIf your code just isn't running, then try searching for what you are trying to do, e.g. ‘save PDF of graph in R made using ggplot'. Almost always there are relevant blog posts or Stack Overflow answers that will help.\n-\tTry to restart R and R Studio and load everything again.\n-\tTry to restart your computer. \n\nThere are a few small mistakes that I often make and may be worth checking in case you make them too: \n\n-\tcheck the class e.g. class(my_dataset$its_column) to make sure that is what it should be; \n-\twhen you're using ggplot make sure you use ‘+' not ‘%>%'; \n-\tcheck whether you are using ‘.' when you shouldn't be, or vice versa.\n\nIt's almost always helpful to take a break and come back the next day.\n\n\n# Introduction, motivation, and example\nMulti-level regression with post-stratification (MRP) is a handy approach when dealing with survey data. Essentially, it trains a model based on the survey, and then applies that trained model to another dataset. There are two main, related, advantages:\n\n1) It can allow us to 're-weight' in a way that includes uncertainty front-of-mind and isn't hamstrung by small samples.\n2) It can allow us to use broad surveys to speak to subsets.\n\nFrom a practical perspective, it tends to be less expensive to collect non-probability samples and so there are benefits of being able to use these types of data. That said, it is not a magic-bullet and the laws of statistics still apply. We will have larger uncertainty around our estimates and they will still be subject to all the usual biases. As [Lauren Kennedy](https://twitter.com/jazzystats) points out, 'MRP has traditionally been used in probability surveys and had potential for non-probability surveys, but we're not sure of the limitations at the moment.' \n\nOne famous example is Wei Wang, David Rothschild, Sharad Goel, and Andrew Gelman, 2014, 'Forecasting elections with non-representative polls', *International Journal of Forecasting*. They used data from the Xbox gaming platform to forecast the 2012 US Presidential Election.\n\nKey facts about the set-up:\n\n- Data from an opt-in poll which was available on the Xbox gaming platform during the 45 days preceding the 2012 US presidential election.\n- Each day there were three to five questions, including voter intention: \"If the election were held today, who would you vote for?\"\n- Respondents were allowed to answer at most once per day.\n- First-time respondents were asked to provide information about themselves, including their sex, race, age, education, state, party ID, political ideology, and who they voted for in the 2008 presidential election. \n- In total, 750,148 interviews were conducted, with 345,858 unique respondents - over 30,000 of whom completed five or more polls\n- Young men dominate the Xbox population: 18-to-29-year-olds comprise 65 per cent of the Xbox dataset, compared to 19 per cent in the exit poll; and men make up 93 per cent of the Xbox sample but only 47 per cent of the electorate.\n\nGiven the US electorate, they use a two-stage modelling approach. The details don't really matter too much, and essentially they model how likely a respondent is to vote for Obama, given various information such as state, education, sex, etc:\n$$\nPr\\left(Y_i = \\mbox{Obama} | Y_i\\in\\{\\mbox{Obama, Romney}\\}\\right) = \\mbox{logit}^{-1}(\\alpha_0 + \\alpha_1(\\mbox{state last vote share}) \n+ \\alpha_{j[i]}^{\\mbox{state}} + \\alpha_{j[i]}^{\\mbox{edu}} + \\alpha_{j[i]}^{\\mbox{sex}}...\n)\n$$\nThey run this in R using glmer() from lme4.\n\nHaving a trained model that considers the effect of these various independent variables on support for the candidates, they now post-stratify, where each of these \"cell-level estimates are weighted by the proportion of the electorate in each cell and aggregated to the appropriate level (i.e., state or national).\" \n\nThis means that they need cross-tabulated population data. In general, the census would have worked, or one of the other large surveys available in the US, but the difficulty is that the variables need to be available on a cross-tab basis. As such, they use exit polls (not an option for Australia in general).\n\nThey make state-specific estimates by post-stratifying to the features of each state.\n![State estimates from the Xbox paper.](inputs/figures/states.png)\n\nSimilarly, they can examine demographic-differences.\n![Demographic differences from the Xbox paper.](inputs/figures/demographics.png)\n\nFinally, they convert their estimates into electoral college estimates.\n![Electoral College estimates from the Xbox paper.](inputs/figures/electoral_college.png)\n\n\n\n# Live-coding introductory example\n\nThe workflow that we are going to use is: \n\n1) read in the poll;\n2) model the poll; \n3) read in the post-stratification data; and\n4) apply the model to the post-stratification data.\n\nFirst load the packages.\n\n```{r initial_model_workplace_setup, message=FALSE, warning=FALSE}\n# Uncomment these (by deleting the #) if you need to install the packages\n# install.packages(\"broom\")\n# install.packages(\"here\")\n# install.packages(\"skimr\")\n# install.packages(\"tidyverse\")\n\nlibrary(broom) # Helps make the regression results tidier\nlibrary(here) # Helps make file referencing easier.\nlibrary(skimr) # Helps summarise the data\nlibrary(tidyverse) # Helps make programming with R easier\n```\n\nThen load some sample polling data to analyse. I have generated this fictitious data so that we have some idea of what to expect from the model. The dependent variable is supports_ALP, which is a binary variable - either 0 or 1. We'll just use two independent variables here: gender, which is either Female or Male (as that is what is available from the ABS); and age_group, which is one of four groups: ages 18 to 29, ages 30 to 44, ages 45 to 59, ages 60 plus.\n\n```{r initial_model_simulate_data, message=FALSE,}\nexample_poll <- read_csv(\"outputs/data/example_poll.csv\") # Here we read in a \n# CSV file and assign it to a dataset called 'example_poll'\n\nhead(example_poll) # Displays the first 10 rows\n\n# Look at some summary statistics to make sure the data seem reasonable\nsummary(example_poll) \nskimr::skim(example_poll)\n```\n\nI generated this polling data to make both made males and older people less likely to vote for the Australian Labor Party; and females and younger people more likely to vote for the Labor Party. Females are over-sampled. As such, we should have an ALP skew on the dataset.\n\n```{r summarise_model_simulate_data, message=FALSE,}\n# The '%>%' is called a 'pipe' and it takes whatever the output is of the \n# command before it, and pipes it to the command after it.\nexample_poll %>% # So we are taking our example_poll dataset and using it as an \n  # input to 'summarise'.\n   # summarise reduces the dimensions, so here we will get one number from a column.\n  summarise(raw_ALP_prop = sum(supports_ALP) / nrow(example_poll))\n```\n\nNow we'd like to see if we can get our results back (we should find females less likely than males to vote for Australian Labor Party and that people are less likely to vote Australian Labor Party as they get older). Our model is:\n$$\n\\mbox{ALP support}_j = \\mbox{gender}_j + \\mbox{age_group}_j + \\epsilon_j.\n$$\n\nThis model says that the probability that some person, $j$, will vote for the Australian Labor Party depends on their gender and their age-group. Based on our simulated data, we would like older age-groups to be less likely to vote for the Australian Labor Party and for males to be less likely to vote for the Australian Labor Party.\n\n```{r initial_model_analyse_example_polling}\n# Here we are running an OLS regression with supports_ALP as the dependent variable \n# and gender and age_group as the independent variables. The dataset that we are \n# using is example_poll. We are then saving that OLS regression to a variable called 'model'.\nmodel <- lm(supports_ALP ~ gender + age_group, \n            data = example_poll\n            )\n\n# broom::tidy just displays the outputs of the regression in a nice table.\nbroom::tidy(model) \n```\n\n\n\nEssentially we've got our inputs back. We just used regular OLS even though our dependent variable is a binary. (It's usually fine to start with an OLS model and then iterate toward an approach that may be more appropriate such as logistic regression or whatever, but where the results are a little more difficult to interpret.) If you wanted to do that then the place to start would be glmer() from the R package lme4, and we'll see that in the next section.\n\n<aside>\n[Monica](https://www.monicaalexander.com/) is horrified by the use of OLS here, and wants it on the record that she regrets not making not doing this part of our marriage vows.\n</aside>\n\nNow we'd like to see if we can use what we found in the poll to get an estimate for each state based on their demographic features.\n\nFirst read in some real demographic data, on a seat basis, from the ABS (we'll go into the process of getting this later).\n\n```{r initial_model_post_stratify_add_coefficients, message=FALSE, warning=FALSE}\ncensus_data <- read_csv(\"outputs/data/census_data.csv\")\nhead(census_data)\n```\n\nWe're just going to do some rough forecasts. For each gender and age_group we want the relevant coefficient in the example_data and we can construct the estimates.\n\n```{r initial_model_post_stratify_age_sex_specific}\n# Here we are making predictions using our model with some new data from the \n# census, and we saving the results of those predictions by adding a new column \n# to the census_data dataset called 'estimate'.\ncensus_data$estimate <- \n  model %>% \n  predict(newdata = census_data)\n\ncensus_data %>% \n  mutate(alp_predict_prop = estimate*cell_prop_of_division_total) %>% \n  group_by(state) %>% \n  summarise(alp_predict = sum(alp_predict_prop))\n```\n\nWe now have post-stratified estimates for each division. Our model has a fair few weaknesses. For instance small cell counts are going to be problematic. And our approach ignores uncertainty, but now that we have something working we can complicate it.\n\n\n\n# Participants pair-code introductory example\n*Please break into pairs and with one person 'driving' (typing) and the other person 'navigating', and attempt to pair-code the introductory example.*\n\nIf you run into issues then I am happy to help point you in the right direction. The full code of the example will be made available after the workshop, so it doesn't matter if you're not able to complete the example now.\n\nAs a reminder, our workflow is: \n\n1) read in the poll;\n2) model the poll; \n3) read in the post-stratification data;\n4) apply your model to the post-stratification data.\n\nGet started by opening the Rproj file from the workshop repo and opening a new R script.\n\n# Live coding extended example\n\nWe'd like to address some of the major issues with our approach, specifically being able to deal with small cell counts, and also taking better account of uncertainty. As we are dealing with survey data, prediction intervals or something similar are crticial, and it's not appropriate to only report central estimates. To do this we'll use the same broad approach as before, but just improving bits of our workflow.\n\nFirst load the packages.\n\n```{r brms_model_workplace_setup, message=FALSE, warning=FALSE}\n# Uncomment these if you need to install the packages\n# install.packages(\"broom\")\n# install.packages(\"brms\")\n# install.packages(\"here\") \n# install.packages(\"tidybayes\")\n# install.packages(\"tidyverse\") \n\nlibrary(broom)\nlibrary(brms) # Used for the modelling\nlibrary(here)\nlibrary(tidybayes) # Used to help understand the modelling estimates\nlibrary(tidyverse) \n```\n\nAs before, read in the polling dataset.\n\n```{r brms_model_simulate_data, message=FALSE,}\nexample_poll <- read_csv(\"outputs/data/example_poll.csv\")\n\nhead(example_poll)\n```\n\nNow, using the same basic model as before, but we move it to a setting that acknowledges the dependent variable as being binary, and in a Bayesian setting.\n\n```{r brms_model_analyse_example_polling}\nmodel <- brm(supports_ALP ~ gender + age_group, \n             data = example_poll, \n             family = bernoulli(),\n             file = \"outputs/model/brms_model\"\n             )\n\nmodel <- read_rds(\"outputs/model/brms_model.rds\")\n\nsummary(model)\n```\n\nWe've moved to the Bernoulli distribution, so we have to do a bit more work to understand our results, but we are broadly getting back what we'd expect.\n\nAs before, we'd like an estimate for each state based on their demographic features and start by reading in the data.\n\n```{r brms_model_post_stratify_add_coefficients, message=FALSE, warning=FALSE}\ncensus_data <- read_csv(\"outputs/data/census_data.csv\")\nhead(census_data)\n```\n\nWe're just going to do some rough forecasts. For each gender and age_group we want the relevant coefficient in the example_data and we can construct the estimates (this code is from Monica Alexander, https://www.monicaalexander.com/posts/2019-08-07-mrp/).\n\n```{r brms_model_post_stratify_age_sex_specific}\npost_stratified_estimates <- \n  model %>% \n  tidybayes::add_predicted_draws(newdata = census_data) %>% \n  rename(alp_predict = .prediction) %>% \n  mutate(alp_predict_prop = alp_predict*cell_prop_of_division_total) %>% \n  group_by(state, .draw) %>% \n  summarise(alp_predict = sum(alp_predict_prop)) %>% \n  group_by(state) %>% \n  summarise(mean = mean(alp_predict), \n            lower = quantile(alp_predict, 0.025), \n            upper = quantile(alp_predict, 0.975))\n\npost_stratified_estimates\n```\n\nWe now have post-stratified estimates for each division. Our new Bayesian approach will enable us to think more deeply about uncertainty. We could complicate this in a variety of ways including adding more coefficients (but remember that we'd need to get new cell counts), or adding some layers.\n\n\n# Participants pair-code extended example\n*Please break into the same pairs as before, but swap who is typing, and attempt to pair-code the extended example.*\n\nIf you run into issues then I am happy to help point you in the right direction. The full code of the example will be made available after the workshop, so it doesn't matter if you're not able to complete the example now.\n\nAs a reminder, our workflow is: \n\n1) read in the poll;\n2) model the poll; \n3) read in the post-stratification data;\n4) apply your model to the post-stratification data.\n\n\n# Live coding\nI will now briefly demonstrate some other aspects that may be useful to improve three aspects of our MRP workflow: \n\n1) (Workflow step 2) adding some more complexity to our model; and\n2) (Workflow step 3) gathering and preparing some data from the ABS that we could use to post-stratify on.\n\nWe will also add a fifth stage to our workflow: Communicating our results.\n\n\n\n## Adding layers\nWe may like to try to add some layers to our model. For instance, we may like a different intercept for each state.\n\n```{r brms_model_analyse_extended}\nmodel_states <- brm(supports_ALP ~ gender + age_group + (1|state), \n                    data = example_poll, \n                    family = bernoulli(),\n                    file = \"outputs/model/brms_model_states\",\n                    control = list(adapt_delta = 0.90)\n                    )\nsummary(model_states)\nbroom.mixed::tidy(model_states, par_type = \"varying\")\nbroom.mixed::tidy(model_states, par_type = \"non-varying\", robust = TRUE)\n\n```\n\nOne interesting aspect is that our multi-level approach will allow us to deal with small cell counts by borrowing information from other cells. \n\n```{r brms_model_analyse_extended_state_counts}\nexample_poll %>% \n  count(state)\n```\n\nAt the moment we have 50 respondents in the Northern Territory, 105 in Tasmania, and 107 in the ACT. Even if we were to remove most of the, say, 18 to 29 year old, male respondents from Tasmania our model would still provide estimates. It does this by pooling, in which the effect of these young, male, Tasmanians is partially determined by other cells that do have respondents. \n\n\n\n## Gathering data\nGetting data tends to be the most troublesome aspect. I've found that the census is fairly useful although it can require some trade-offs (e.g. if you are doing political work then it's not exactly the same as the electoral roll even if you restrict it to Australian citizens aged at least 18). Nonetheless, I've found the best way to get the sub-cell counts is to use ABS TableBuilder. There are two versions - 'basic' which is free, and 'pro', which is normally $2,510 per year, but which you can get access to if you're associated with an Australian university. \n\n![TableBuilder front page.](inputs/figures/tablebuilder.png)\n\nOnce you create an account then you can access census data for 2006, 2011, and 2016. (The ABS have relatively recently done some linking between censuses so there is actually some linked data, which is exciting).\n\n![TableBuilder after logging in.](inputs/figures/census_select_type.png)\n\nThe website is a bit cumbersome, but considering what they provide it is worth sticking with it. I usually use 'Counting Persons, Place of Usual Residence', but sometimes 'Counting Persons, Place of Enumeration' is also handy.\n\n![TableBuilder selecting which census.](inputs/figures/census_type.png)\n\nWe want to create a new table, and we do this by specifying the columns and rows.\n\n![TableBuilder selecting columns.](inputs/figures/census_cols.png)\n\nOnce you have the set-up that you want then you can retrieve the data. \n\n![TableBuilder selecting rows.](inputs/figures/census_rows.png)\n\nYou can download the data in various Excel, CSV, and other formats. If your dataset is large then you may need to submit for it to be built, which can take a day or two. Finally, if your sub-cell counts are especially small, then they will be blown around by the randomness that the ABS adds.\n\n![TableBuilder downloading data and creating custom groups.](inputs/figures/census_download.png)\n\nHelpfully you can create custom groupings for geography, say to load specific electorates, and other aspects, such as age-groups. To get started with this, select 'Custom data'.\n\n\n## Communication\nThere are many interesting aspects that we may like to communicate to others. For instance, we may like to show how the model is affecting the results. We can make a graph that compares the raw estimate with the model estimate.\n\n```{r}\npost_stratified_estimates %>% \n  ggplot(aes(y = mean, x = forcats::fct_inorder(state), color = \"MRP estimate\")) + \n  geom_point() +\n  geom_errorbar(aes(ymin = lower, ymax = upper), width = 0) + \n  ylab(\"Proportion ALP support\") + \n  xlab(\"State\") + \n  geom_point(data = example_poll %>% \n               group_by(state, supports_ALP) %>%\n               summarise(n = n()) %>% \n               group_by(state) %>% \n               mutate(prop = n/sum(n)) %>% \n               filter(supports_ALP==1), \n             aes(state, prop, color = \"Raw data\")) +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Set1\") +\n  theme(legend.position = \"bottom\") +\n  theme(legend.title = element_blank())\n```\n\nSimilarly, we may like to plot the distribution of the coefficients.\n\n<aside>\nYou can work out which coefficients to be pass to gather_draws by using tidybayes::get_variables(model).\n(In this example I passed 'b_.', but the ones of interest to you may be different.)\n</aside>\n\n\n```{r}\nmodel %>%\n  gather_draws(`b_.*`, regex=TRUE) %>%\n  ungroup() %>%\n  mutate(coefficient = stringr::str_replace_all(.variable, c(\"b_\" = \"\"))) %>%\n  mutate(coefficient = forcats::fct_recode(coefficient,\n                                           Intercept = \"Intercept\",\n                                           `Is male` = \"genderMale\",\n                                           `Age 30-44` = \"age_groupages30to44\",\n                                           `Age 45-59` = \"age_groupages45to59\",\n                                           `Age 60+` = \"age_groupages60plus\"\n                                           )) %>% \n\n# both %>% \n  ggplot(aes(y=fct_rev(coefficient), x = .value)) + \n  ggridges::geom_density_ridges2(aes(height = ..density..),\n                                 rel_min_height = 0.01, \n                                 stat = \"density\",\n                                 scale=1.5) +\n  xlab(\"Distribution of estimate\") +\n  ylab(\"Coefficient\") +\n  scale_fill_brewer(name = \"Dataset: \", palette = \"Set1\") +\n  theme_minimal() +\n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n  theme(legend.position = \"bottom\")\n\n\n```\n\n\n# Concluding remarks\n\nIn general, MRP is a good way to accomplish specific aims, but it's not without trade-offs. If you have a good quality survey, then it may be a way to speak to disaggregated aspects of it. Or if you are concerned about uncertainty then it is a good way to think about that. If you have a biased survey then it's a great place to start, but it's not a panacea.\n\nThere's not a lot of work that's been done using Australian data, so there's plenty of scope for exciting work. I look forward to seeing what you do with it!\n\n\n\n# Next steps\n\nThere are a lot of resources out there that would make great next steps. I recommend having a look at the following resources to see which speaks best to your interests and background.\n\n1. Alexander, Monica, 2019, 'Analyzing name changes after marriage using a non-representative survey', available at: https://www.monicaalexander.com/posts/2019-08-07-mrp/.\n2. Kennedy, Lauren, and Jonah Gabry, 2019, 'MRP with rstanarm', available at: https://mc-stan.org/rstanarm/articles/mrp.html.\n3. Kennedy, Lauren, and Andrew Gelman, 2019, 'Know your population and know your model: Using model-based regression and poststratification to generalize findings beyond the observed sample', available at: https://arxiv.org/abs/1906.11323.\n4. Kastellec, Jonathan, Jeffrey Lax, and Justin Phillips, 2016, 'Estimating State Public Opinion With Multi-Level Regression and Poststratification using R', available at: https://scholar.princeton.edu/sites/default/files/jkastellec/files/mrp_primer.pdf. \n5. Hanretty, Chris, 2019, 'An introduction to multilevel regression and post-stratification for estimating constituency opinion', available at:  https://journals.sagepub.com/doi/abs/10.1177/1478929919864773.\n6. Downes, Marnie, Lyle Gurrin, Dallas English, Jane Pirkis, Dianne Currier, Matthew Spittal, and John Carlin, 2018, 'Multilevel Regression and Poststratification: A Modeling Approach to Estimating Population Quantities From Highly Selected Survey Samples', available at: https://www.ncbi.nlm.nih.gov/pubmed/29635276.\n7. Jackman, Simon, Shaun Ratcliff, and Luke Mansillo, 2019, 'Small area estimates of public opinion: Model-assisted post-stratification of data from voter advice applications', available at: https://www.cambridge.org/core/membership/services/aop-file-manager/file/5c2f6ebb7cf9ee1118d11c0a/APMM-2019-Simon-Jackman.pdf\n8. (Self-promotion alert) Alexander, Rohan, Patrick Dumont, and Patrick Leslie, 2019, 'Forecasting Multi-District Election', available at: https://github.com/RohanAlexander/ForecastingMultiDistrictElections.\n\nIf you don't have survey data, then there is some individual-level data available on the Australian Data Archive: https://ada.edu.au. You will need to request access to the datasets, but they are very keen for people to use their data and will help you through the process if needed. \n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":{"distill::distill_article":{"self_contained":false,"toc":true,"toc_depth":2}},"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"getting-started-with-mrp.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Danger","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.266","theme":"cosmo","title":"Getting started with MRP","description":"Multi-level regression with post-stratification (MRP) is a popular way to adjust non-representative samples to better analyse opinion and other survey responses. I recently ran a hands-on workshop at the ANU, aimed at interested, but not experienced, social scientists to help de-mystify MRP. The workshop aimed to give participants the ability and confidence to: 1) critically read papers that use it; and 2) apply it in their own work. Examples of how to implement MRP were illustrated in R using the brms package. The following post gives the outline of the workshop and the material and coding exercises covered.\n","author":[{"name":"Rohan Alexander"}],"date":"2019-12-03"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}